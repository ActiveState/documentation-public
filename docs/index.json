[
{
	"uri": "https://activestate.github.io/documentation-public/contributions/guides/getting-started/",
	"title": "Getting Started Guide",
	"tags": [],
	"description": "",
	"content": "You can use the ActiveState Platform API to define repeatable, composable, serverless builds.\nTutorial Step-by step instruction on how to start a project. The tutorial is written for developers without GraphQL experience.\nThe tutorial covers:\n Authentication Connecting to the GraphQL endpoint Your first query Understanding mutations Exploring the capabilities of the API  Quick Start A one page summary of how to start a new project.\nWhere do I go next? Misc Notes Open Source communities can use our GraphQL API to create repeatable serverless builds. Using only GraphQL queries, contributors can define and compose build steps for building complex Open Source software for any operating system and language without having to worry about infrastructure.\nThe GraphQL API provides a method to declare a rule that takes some set of inputs, runs a shell script or other executable, and creates some output. Rules can be composed together. An output from one rule can be used as the input to others, much like unix command line tools can be piped.\nYou use the API to:\n Describe how to build things Specify the dependancies of those things Define the platforms they should be built with  Where to begin If you:\n Have never used GraphQL before: About GraphQL Want to jump in with concrete examples: Making API Calls Want to try it out and experiment: Explorer  GraphQL fundamentals \u0026ldquo;In its simplest form, GraphQL is all about asking for specific fields of objects.\u0026rdquo;\n\u0026ldquo;The GraphQL query language defines how to interact with data using GraphQL\u0026rsquo;s queries and mutations. Queries let you ask for data, whereas Mutations let you write data.\u0026rdquo;\nKey benefits of GraphQL:\n Optimized resource usage - The client can request the specific information and only that information. This contrasts with REST APIs which typically require multiple calls to the server that return more than the specific information required. GraphQL reduces both the number of requests and responses, and the size of the requests and responses, in many cases. Easier to work with for the client - Similarly, when the client is able to just request the required information there is less work for the client to do to parse and use the response. Clients can ask for exactly the data they need. Enables better documented APIs - Zero configuration API documentation.  \u0026ldquo;One of the great advantages of GraphQL over REST is fetching nested resources in a single query. You can ask for a resource, for example users, and a list of nested resources, for example pins, in a single query. In order to do that with REST, you would have to get users and pins in separate HTTP requests.\u0026rdquo;\n\u0026ldquo;Note that only fields with Object type can have nested fields.\u0026rdquo;\n\u0026ldquo;GraphQL servers expose their schema in order to let clients know which queries and mutations are available.\u0026rdquo;\n\u0026ldquo;GraphQL defines two special object types, Query and Mutation. They are special because they define the entry points of a schema. Being the entry point of a schema means that GraphQL clients must start their queries with one or more of the fields from Query.\u0026rdquo;\n\u0026ldquo;Every field has an underlying function (called resolver) that runs before returning its value, so it makes sense to think of field arguments the same way we think of function arguments.\u0026rdquo;\nWhy we chose GraphQL  It is a language for representing graphs, and our build system is a DAG which is a type of graph. It has a powerful type system and schemas It is widely supported and many frameworks exist that make implementing it straightforward for client applications and on the server It provides documentation and tooling to simplify understanding the capablities of the API and exploring it interactively.  Testing command output $ pip install gql from gql import ggl, Client from gql.transport.requests import RequestsHTTPTransport { \u0026#34;me\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Luke Skywalker\u0026#34; } } Additional resources  GraphQL spec GraphQL implementations and documentation examples GraphQL resources Inventory API slides A gentle introduction to GraphQL API integrations Explore Your GraphQL Server in the Browser with GraphiQL  Static sites  Dynamic JAMStack with Gatsby and Hasura GraphQL  "
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/changelog/",
	"title": "Changelog",
	"tags": [],
	"description": "",
	"content": " This changelog includes changes to the GraphQL API and developer contributions. For the more general ActiveState Platform updates and changes, see the ActiveState Platform Changelog.\n "
},
{
	"uri": "https://activestate.github.io/documentation-public/start/",
	"title": "Quick start guides",
	"tags": [],
	"description": "",
	"content": "  ActiveState Platform  This quick start covers the first steps to take after you sign up for the ActiveState Platform.\n ActiveState managed projects  Managed projects provide access to the ActiveState language distributions that are available to your organization.\n Custom language runtimes  You can build a custom language runtime with the language, packages, and platforms you need.\n State Tool CLI  This quick start is for intermediate or advanced developers who want to get up and running right away.\n "
},
{
	"uri": "https://activestate.github.io/documentation-public/start/platform/",
	"title": "ActiveState Platform",
	"tags": [],
	"description": "",
	"content": "This quick start covers the first steps to take after you sign up for the ActiveState Platform.\nJoining your first Organization When a colleague or ActiveState employee invites you to join the ActiveState Platform you will receive an email invitation to join a specific organization. You need to create your account for the ActiveState Platform and confirm that you want to join the organization.\n Open the email invite you received from notifications@activestate.com to join the organization. Click the link in the email, or copy and paste the link text into your browser address bar. You will be redirected to the ActiveState Platform Create an Account page if you are a new user, or Sign In page if you have an existing ActiveState Platform account. If you are a new user, enter the requested information in the Create an Account page, and then click Create Account. If you already have an account, sign in with your username or email and password. In the You\u0026rsquo;ve been invited page, click Accept Invitation to confirm that you want to join the organization you have been invited to.  Joining additional Organizations The ActiveState Platform allows you to link more than one organization to your user account. This means that you can, for example, access your work projects and personal projects using a single user account.\n Open the email invite you received from notifications@activestate.com to join the organization. You will receive a separate email invite for each organization you are invited to. Click the link in the email, or copy and paste the link text into your browser address bar. If you are prompted to sign in, enter your username or email and password and click Sign In. In the You\u0026rsquo;ve been invited page click Join to confirm that you want to join the organization you have been invited to.  Viewing your Dashboard After you first sign in and join an organization, you are redirected to your profile page called Your Dashboard.\nYour Dashboard displays recent activity, the organizations you belong to and the Projects you have access to. You can navigate to pages for working with each organization and for managing the organizations you belong to, and access projects and downloadable installers for ActiveState language distributions and Komodo.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/start/managed/",
	"title": "ActiveState managed projects",
	"tags": [],
	"description": "",
	"content": "Managed projects provide access to the ActiveState language distributions that are available to your organization.\nActiveState manages and updates these language distributions, and packages them as installers you can download and install on your computer.\nGetting started with Managed Projects The distributions available to your Organization, and how you can use them in production, depend on the type ActiveState customer you are. Customers of ActiveState prior to the launch of the ActiveState Platform can continue to get their language builds and installers, previously available through Connect or My Account, from the Platform.\n Enterprise Edition customers: You get access the custom language distribution builds that ActiveState provides on a quarterly basis. These are managed builds created and maintained by ActiveState. Business Edition customers: You get access to a catalog projects for the business edition language you purchased. These are managed builds created and maintained by ActiveState. OEM customers: You get access to the language distribution builds you are licensed to redistribute.  Important: ActiveState language distributions are licensed solely in accordance with the terms of their respective license agreements and or support level agreements, available at https://www.activestate.com/eulas/or by logging in to My Accountfor your account details.\nIf you do not have access to the builds you expect to see, contact support@activestate.com. If you previously accessed your installers through My Account, you can continue to access them there through 2019 at account.activestate.com.\nTo access your managed projects:\n Open your web browser and navigate to http://platform.activestate.comand sign in. Click Your Dashboard at the top of the page. In the Your Organizations panel, select an organization that contains managed projects. Click the Projects tab. In the Managed panel, click the name of the project to view the Overview page. From the Overview page, you can:  Review the list of packages and versions included in the project. Click any of the buttons in the Download Builds panel to download the installer for your operating system. Copy the command to install the project using the State Tool. Click the Fork It link to create a copy of the project. Forking a project allows you to get the latest changes as commits are added to the original project. For more information, see Forking Projects.   "
},
{
	"uri": "https://activestate.github.io/documentation-public/start/build/",
	"title": "Custom language runtimes",
	"tags": [],
	"description": "",
	"content": "You can build a custom language runtime with the language, packages, and platforms you need.\nCustomizing language builds is an in-progress, beta feature. We\u0026rsquo;re working hard on adding packages and optimizing the build experience. We recommend that you start with a small number of packages on your preferred operating system. Once your project builds successfully, you can experiment with additional options.\n  Open your web browser and navigate to http://platform.activestate.comand sign in. To create a project for your personal use, click the Projects tab on your dashboard page. To create a project in an Organization, select the Organization in the Your Organizations list and then click the Projects tab. Click Build a Custom Runtime. Enter a meaningful name for the project in Project Name. Projects are public by default. If you belong to an organization on a paid tier, you have the option of selecting Private to create a project that\u0026rsquo;s only visible to members of the selected organization. In Choose a Language, select the language to include and the version for each language. In Operating Systems, select the operating system(s) where you will be installing the language distributions for your project. Click Create Project.  To add packages to your new project:\n Click Add Packages to customize the packages included in your build. In the Add Packages dialog box, type in part of a package name and click Search. Click Add next to the package name to add a package from the search results. Repeat steps 2 and 3 to add additional packages, and click Done when you are finished adding packages. Click Commit Changes. This is the step that starts the build in our server farm. The time it takes for the build to complete depends on the complexity of the build and the available resources to complete the build. Click View Status. If the build status is In Progress, you can come back later to verify that the build completed successfully. In some cases, the build will fail immediately and you may need to adjust your settings and try again. Once your build completes successfully, you can download the installer from the Download Builds tab or use the commands listed on the Overview page to activate your project using the State Tool. "
},
{
	"uri": "https://activestate.github.io/documentation-public/start/state-tool/",
	"title": "State Tool CLI",
	"tags": [],
	"description": "",
	"content": "This quick start is for intermediate or advanced developers who want to get up and running right away.\nInstall the State Tool On Linux:\nsh \u0026lt;(curl -q https://platform.activestate.com/dl/cli/install.sh) On Windows:\n  Run the following as Administrator in PowerShell:\nIEX(New-Object Net.WebClient).downloadString(\u0026#39;https://platform.activestate.com/dl/cli/install.ps1\u0026#39;)   Start the command prompt (cmd.exe) to use the State Tool.\n  Sign in to the ActiveState Platform If you don\u0026rsquo;t have a Platform account yet, you need to sign up:\nstate auth signup Enter the requested information at the prompt to register your account. You will receive an email to verify your account. You have limited permissions to the Platform before you verify it. After registering your account you can sign in.\nIf you already have an ActiveState Platform account, or you just created an account you need to sign in:\nstate auth Enter your username and password for the Platform at the prompts.\nCreate a new project locally state init \u0026lt;username_or_org_name\u0026gt;/\u0026lt;project_name\u0026gt; language@version For example:\nstate init jsmith/python-3-6 python3@3.6.6\nChange directories into your project folder Linux:\ncd \u0026lt;username_or_org_name\u0026gt;/\u0026lt;project_name\u0026gt; Windows:\ncd \u0026lt;username_or_org_name\u0026gt;\\\u0026lt;project_name\u0026gt; Push your project to the ActiveState Platform state push Add required packages for your project state packages add requests@2.21.0 state packages add pandas If you have a requirements.txt file for your Python project, you can alternatively import all your packages using the file.\nstate packages import --file requirements.txt Synchronize your local project with the Platform project state pull Activate your project state activate Access documentation for CLI commands To learn more about the State Tool commands, run state --help in the terminal.\nFor help on individual commands, run state COMMAND --help. For example, state packages --help.\nFor more information on the State Tool and the available commands see the State Tool section of the docs.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/user/",
	"title": "Manage your account",
	"tags": [],
	"description": "",
	"content": "  Creating an account   Preferences   About Your Dashboard   Resetting your password   Signing In   Signing Out   "
},
{
	"uri": "https://activestate.github.io/documentation-public/user/create_account/",
	"title": "Creating an account",
	"tags": [],
	"description": "",
	"content": "To create an account:\n Navigate to the Create an Account page: https://platform.activestate.com/create_account. Enter the following information:  Email: Enter a valid email. A confirmation email will be sent to activate your account. Username: Enter a unique username for the ActiveState Platform. Password: Enter a password with at least 8 characters, and then enter the same password in the Confirm Password text box.   Click Create Account. By clicking the \u0026ldquo;Create Account\u0026rdquo; button, you accept the Platform Terms of Use and Service Agreement. Click the link to view the agreement.  "
},
{
	"uri": "https://activestate.github.io/documentation-public/troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "",
	"content": " Troubleshooting FAQ Reporting Errors  Troubleshooting FAQ Can I pass my invite on to someone else in my organization?\nNo. The invite email is specific to your email address and your organization. If you would like to provide access to other people in your organization you can either 1) sign up for the Platform yourself and invite them, or 2) contact us with the email addresses of the users to invite, and we will send them individual invites.\nMy invite link URL points to the http://t.yesware.com domain. Is this spam? Why doesn\u0026rsquo;t it come from your company\u0026rsquo;s usual activestate.com mail server?\nNo, the email is from ActiveState. We used Yesware, a third party service to mail merge and send the Platform invite emails. If your network rejects emails sent via Yesware, contact us and we will send you an invite directly from the platform.\nWhy am I not notified that the My Account site, located at https://account.activestate.com, is scheduled to shut down when I log in there?\nMy Account should display this messaging, and it will be added soon.\nReporting Errors Browser errors As you work in the ActiveState Platform you may encounter temporary issues due to network or Internet connectivity problems. The majority of the time these issues will resolve themselves promptly and you can continue by waiting for a short period of time and then refreshing the page, or by closing your browser or logging out and then signing in again.\nIf however you consistently encounter an error message, you can help us diagnose the problem by checking for errors in your browser before contacting the support team.\nYou can do this by opening your browser\u0026rsquo;s developer tools and taking a screenshot of any errors displayed in the console, or site log window. In most browsers, you can access the console by right clicking on the web page displaying the error and selecting Inspect.\nIn some browsers, opening the developers tools might not automatically display the console. If this happens, click the Console option in the developer window and take screenshots of any errors displayed there.\nPlease reach out to the support team at support@activestate.comwith the error screenshots, along with:\n The email address associated with your ActiveState Platform account The specific browser and version combination you are using to access the Platform. Your operating system and version.  For more detailed information about using the developer tools in your browser, see the browser documentation:\n Chrome Internet Explorer Microsoft Edge Firefox Safari  State Tool issues If you encounter errors when using the State Tool, please reach out to our support team at support@activestate.com. The more information you can provide them with, the sooner your issue can be reproduced and resolved. Please provide the following information, where possible:\n A short summary of the issue Step steps to reproduce Expected result Actual result Logs (if relevant)  The State Tool logs are stored in the following locations by default:\n Windows: C:\\Users\\\u0026lt;User\u0026gt;\\AppData\\Roaming\\activestate\\cli-unstable\\log.txt Linux: ~/.config/activestate/cli-unstable/log.txt  "
},
{
	"uri": "https://activestate.github.io/documentation-public/trademarks/",
	"title": "Trademarks",
	"tags": [],
	"description": "",
	"content": "ActiveState®, Komodo®, ActiveState Perl Dev Kit®, ActiveState Tcl Dev Kit®, ActivePerl®, ActivePython®, and ActiveTcl® are registered trademarks of ActiveState. All other marks are property of their respective owners.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/terms/",
	"title": "Terms of Use and Service Agreement",
	"tags": [],
	"description": "",
	"content": " ActiveState Platform Terms of Use and Service Agreement  Community Edition terms  ActiveState Community Edition License Agreement  Additional terms If you have signed up for an addendum then such addendum applies to you, and you agree to its provisions.\n Business Edition Enterprise Edition Enterprise Edition Limited ActiveState Platform Enterprise Tier ActiveState Platform OEM Distribution License  "
},
{
	"uri": "https://activestate.github.io/documentation-public/user/prefs/",
	"title": "Preferences",
	"tags": [],
	"description": "",
	"content": "  Change Password  You can change your password at any time in the Change Password page.\n Date \u0026amp; Time  You can change the way dates and times are displayed in the ActiveState Platform and the timezone that is used.\n Email Addresses  You can add or change the email addresses associated with your ActiveState Platform account.\n Organizations  You can add new Organizations or leave Organizations you are a member of in the Organizations account settings page.\n Two-factor Authentication  You can use two-factor authentication to secure your ActiveState Platform account.\n "
},
{
	"uri": "https://activestate.github.io/documentation-public/organizations/",
	"title": "Manage organizations",
	"tags": [],
	"description": "",
	"content": "  Creating Organizations   Deleting Organizations   Leaving Organizations   Removing Users   Sending Invites   Updating Billing Details   "
},
{
	"uri": "https://activestate.github.io/documentation-public/projects/custom/",
	"title": "Creating custom projects",
	"tags": [],
	"description": "",
	"content": "You can create custom projects that include only the ActiveState programming language distributions and packages you need for the specific operating systems you are working on. The Platform currently supports a wide variety of ActivePython and ActivePerl versions on Linux, Windows, and macOS.\n Open your web browser and navigate to http://platform.activestate.comand sign in. In the Your Organizations list, select the organization to create a custom build for, or click the Projects tab to create a personal project. Click Build a Custom Runtime. Enter a short, meaningful name for the project in Project Name. In the Select Languages section, select the checkbox next to the language to include in the project, and then select the appropriate version from the drop-down list.  To increase the likelihood of your build completing successfully, start with a recommended configuration, such as Python 3.6.6 on Linux or Windows, and add other languages once your project is building without errors.\n  In the Select Platforms section, click the platform operating system to use and then click the checkbox next to the platform(s) to include. The platforms list includes a description of the operating system versions the platform is for.\n  Click Create Project.\n  Add packages to your project using the Customize your build options in the Requested packages panel:\n Click Choose Packages to search for and add packages individually. Click Import from requirements.txt to add the set of packages and versions required for your project. For more information on specifying your project requirements using a requirements.txt file, see Creating projects from requirements.txt files.  The packages you selected are listed in the Requested Packages list, and any dependencies of these selected packages are listed in the Dependencies list.\n  When you have reviewed the packages and dependencies that are included and you are satisfied, click Commit Changes to start the build process.\n  Click View Status to see the progress of the build. Depending on the packages included and the complexity of the build it can take quite a bit of time for the build to complete. You may need to come back later to access the finished build output.\n  If the build completed successfully, you can download the installer for your build on the Builds page by clicking Download. For Linux, the file you want to download is named ActivePython-linux-\u0026lt;platform\u0026gt;-\u0026lt;identifier\u0026gt;.tar.gz. You do not need to download the recipe.json, packages, or tests files that are listed unless you specifically require them.\n  "
},
{
	"uri": "https://activestate.github.io/documentation-public/projects/",
	"title": "Projects",
	"tags": [],
	"description": "",
	"content": "There are several distinct types of projects you can create or access on the ActiveState Platform:\n Public Projects: Custom projects or forked projects created by users and available to other Platform users. Private Projects: Custom projects or forked projects created by users that are restricted to the organization they are created in. Private projects are only available to organizations on paid tiers. Featured Projects: ActiveState\u0026rsquo;s Community Edition languages used by millions of developers to kickstart their development. See the Featured Projects \u0026amp; Languages page on the ActiveState Platform. Managed Projects: ActiveState distributions that are specifically created, updated, and tested for an organization by ActiveState. Managed projects are private.  Project pages  Overview: This page lists the platforms, or specific operating system and hardware the build is compatible with, the open source language release included, and the list of packages included. Configuration: Use this page to modify the language, platforms, and packages for your project. You can create and submit a new commit with your changes. Download Builds: Click this tab to download the current installers for the project. Scripts: Click this tab if you want to configure secrets for your project that you can use via the State Tool. History: Click this tab to view the current and previous releases for the project. You can select an earlier release and then access all of the information about the release in the Overview and Builds tabs. Project Settings: Click this tab to update the project\u0026rsquo;s name and description, specify if it is a public or private project, or delete the project. Fork It: Click the Fork It button next to the project name enables you create a copy of the project and track updates to the project.  Custom projects You can also create your own custom projects that just contain what you need for your development projects. You can chooses the specific packages, language(s), and operating system(s) to include. For more information, see Creating custom projects.\nWorking with projects To access projects:\n Sign in to the ActiveState Platform and navigate to an organization you belong to that contains the project you are interested in. The projects available to you are listed on the Dashboard. Click the project you want to open. You can also click on the Projects tab from anywhere in the application to view your personal projects and then click on the project you want to open.  To rename a project:\n Navigate to the project you want to rename. Click the Project Settings tab. Enter the new name in the Project Name text box and click Save.  To delete a project:\n Navigate to the project you want to rename. Click the Project Settings tab. Click Delete. Click Yes to confirm the project deletion. Note that once you delete the project you cannot reuse the same project name.  Downloading the latest releases  Navigate to the project you want to download from. Click the Download Builds tab. Select the platform to download the installer for. Click Download.  Downloading earlier releases  Navigate to the project you want to download from. Click the History tab. Select the quarterly release you want to download. Select the platform to download the installer for. Click Download.  Forking projects You can fork any project you have created in your personal account, or in any organizations you belong to. For example, you can create a custom project in your personal account and build and test it, and then fork it to an organization you belong to so your entire team has access to the exact same build.\nIf you belong to an organization on the Business tier or Enterprise tier you can also fork ActiveState managed projects available to that organization. These projects include builds created and tested by ActiveState. Any fork you create from these projects tracks the original project and gets updated packages and bug fixes automatically when ActiveState updates the managed project. These are private projects that you cannot customize. For more information, see Forking projects.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/pull-requests/",
	"title": "Opening pull requests",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/code/",
	"title": "Code contributions",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/documentation/",
	"title": "Documentation contributions",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://activestate.github.io/documentation-public/state/",
	"title": "State Tool",
	"tags": [],
	"description": "",
	"content": "Introducing the State Tool (Beta) Wouldn’t it be great if any developer could run a single command and immediately get started contributing code to your project? And wouldn\u0026rsquo;t it be even better to automate all of the tedious configuration workflow you usually go through? This is exactly what ActiveState is working to facilitate with our State Tool.\nOnce you have set up your runtime environment, by creating a Project on the ActiveState Platform and are getting successful builds, you can instantly deploy your runtime environment locally using the State Tool. The State Tool creates a virtual environment, similar to virtualenv and pipenv, and will not contaminate any of the preexisting Python installations or environments you have configured.\nAbout the State Tool The State Tool is the command line tool for the ActiveState Platform. It allows you to manage and use Platform projects right from the command prompt. You can create new projects, view existing projects, and download and install project runtimes.\nThe State Tool has two distinct capabilities:\n Commands: These are for tasks you want the State Tool to do. You can enter commands and subcommands using state [command] on the command line. Flags: These are for providing optional parameters to modify the behavior of commands. Flags are specific to the command and each command can have its own flags. For example, --language python3 in the state init command causes Python 3 to be selected as the runtime language.  You can learn the State Tool command line interactively using the --help flag. Help is provided for each command and subcommand, and you can explore the hierarchy of commands until you find what you need.\nFor example, the following commands provide increasing detail about the state secretes set subcommand:\n# list information about the available commands state --help # show details for the secrets command state secrets --help # show details for the set subcommand state secrets set --help Installing the State Tool Currently, the State Tool is supported for ActivePython and ActivePerl projects on Linux and Windows. Upcoming releases will support macOS and additional languages.\n Installation on Linux You should have curl installed before you can run the script to install the State Tool. Alternatively, you can manually download and run the install.sh file.\n  Open your command prompt and enter the following command on one line:\nsh \u0026lt;(curl -q https://platform.activestate.com/dl/cli/install.sh) The latest version of the State Tool will be downloaded, verified, and installed.\n  Installation on Windows The State Tool installation requires PowerShell version 3.0 or higher. On older versions of Windows you will need to manually upgrade PowerShell to a supported version before completing the installation. For more information, see Upgrading existing Windows PowerShell.\n   Start PowerShell as an Administrator. Click the Start menu, search for Windows PowerShell, right click it and select Run as Administrator.\n  At the prompt, enter the following command:\nIEX(New-Object Net.WebClient).downloadString(\u0026#39;https://platform.activestate.com/dl/cli/install.ps1\u0026#39;) The latest version of the State Tool will be downloaded, verified, and installed.\n  Start your command prompt (cmd.exe) to use the State Tool. Click the Start menu, search for Command Prompt, and click the menu item.\n  Currently, you cannot run the State Tool in PowerShell. You must use the command prompt (cmd.exe). Support for PowerShell is coming soon.\n Usage The basic usage for setting up a local virtual environment with your project is:\n$ state activate owner/projectName Where \u0026ldquo;owner\u0026rdquo; refers to your username or the organization name that the project belongs to.\nWorking with your activated project There are two ways to reactivate an existing project:\n Enter state activate owner/projectName anywhere on your system and you will be given the option to reuse your previously used directory and enter into an activated state. Open your terminal and navigate to the directory that contains the activestate.yaml file for the project and enter state activate without any additional arguments.  To verify that your environment is \u0026ldquo;activated\u0026rdquo;:\n When in an activated state the “ACTIVESTATE_ACTIVATED” environment variable will be defined. Also if your terminal shell allows for it, an informational message starting with Active State: will be printed after each command is executed. On Linux, you can check the value of the environment variable by entering the following command:  printenv | grep ACTIVESTATE_ACTIVATED Using Your Project Whenever you are in an “activated state”, your shell will be configured to use the runtime environment you created on the ActiveState Platform. Any preexisting Python installations you have will be overridden ONLY while using the “activated state”.\nThe State Tool provides a number of ways to configure your ActiveState Platform project to integrate it with your development environment. You can customize your configuration by editing the activestate.yaml configuration file in your project\u0026rsquo;s root directory.\nYou can use the following mechanisms to customize the configuration of your project:\n Constants: Define constant values that can be reused throughout your configuration file. For example, you can define a hostname that\u0026rsquo;s used repeatedly as a constant and then use the constant name for subsequent references. Secrets: Securely save and retrieve sensitive values for use in your configuration file, either at the project or user level. Scripts: Name and define scripts that you can run within your project by typing the name of the script. Events: Run scripts or commands when particular State Tool events occur. For example, you can hook into the State Tool ACTIVATE event to start up the database server for your development environment.  For more detailed information and examples, see Getting Started.\nCommand Reference This release of the State Tool includes a number of commands for interacting with the ActiveState Platform and your projects. For the complete list run state help, or run state \u0026lt;command_name\u0026gt; help for help with a particular command.\n activate auth clean events export fork history init languages organizations packages platforms projects pull push run scripts secrets show update  Logging and configuration Linux On Linux the State Tool logs and configuration files are located in ~/.config/activestate/cli-unstable.\nThe log file is named log.txt.\nThe configuration file is named config.yaml. The configuration file stores the API token used to authenticate with the ActiveState Platform and your default locale. You can change the default location by creating an ACTIVESTATE_CLI_CONFIGDIR environment variable and setting the location to use.\nThe language runtimes used by your activated projects are stored in subfolders under ~/.cache/activestate/. You can change the default location by creating an ACTIVESTATE_CLI_CACHEDIR environment variable and setting the location to use.\nWindows On Windows, the State Tool logs and configuration files are located in\nThe State Tool logs and configuration files are located in C:\\Users\\\u0026lt;User\u0026gt;\\AppData\\Roaming\\activestate\\cli-unstable\\\nThe language runtimes used by your activated projects are stored in subfolders under %HOME%\\AppData\\Local\\activestate\\cli-unstable\\. You can change the default location by creating an ACTIVESTATE_CLI_CACHEDIR environment variable and setting the location to use.\nUninstalling the State Tool You can uninstall the State Tool by running the state clean command. For more information, see the command reference.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/state/start/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "The State Tool offers a number of methods for simplifying and securing your Project configuration and integrating it with your development environment.\nFor information on installing the State Tool, see the installation section.\nCreating Your First Project The State Tool cannot do anything without a project, everything lives under your project.\nYou can create your project either via the State Tool itself via the state init command or by going directly to the ActiveState Platform Dashboard and creating it there. Since you probably still need an account let’s go with the latter.\nHead over to http://platform.activestate.com and create an account if you don’t already have one, otherwise just login.\nOnce logged in go ahead and create a new project. You will be asked for a platform and language for your project, simply use the most fitting answers. For more information on projects check out the Projects documentation.\nActivating Your Project It’s time to activate your project! Go ahead and switch back to your command prompt. Before we can do anything we need to make sure that we’re authenticated, to do this simply run the state auth command:\nstate auth You will be prompted for your username and password, and if all goes well it should show a friendly “You have authenticated” message.\nNow we’re ready to activate our project. Run the state activate command:\nstate activate owner/projectName The owner would be your username or if you created your project in an organization then instead of your username you can use the organization name.\nThis will create a new project folder under the current working directory containing an activestate.yaml file with some essentials. The State Tool will “activate” under this new project directory. This is a brand new project though and being in an “activated state” doesn’t mean much yet, so let’s deactivate by executing the exit command (or hit Ctrl+D).\nNow when you want to work on your project again you can run the same state activate owner/projectName command again from anywhere and you’ll be entered into an activated state under your project directory. Alternatively you can manually enter into your project directory and run state activate without any other arguments.\nConfiguring Your Projects “Activated State” So we have the basics in place, now it’s time to actually put everything to good use. What’s the point of all this if it’s not actually doing anything but changing a directory? Think of it as moving into a brand new house that’s completely empty; now it’s time to decorate.\nConstants You can define constants in your activestate.yaml file and reuse them throughout the file. Constants are defined in a constants section using name/value pairs:\nconstants: - name: LOCATION value: World You can use the constants you define in other constants, scripts, events, and other configuration fields. The following example defines the same LOCATION constant, and references it in the subsequent entry as $constants.Location. Constants are referenced this way wherever you use them in your activestate.yaml file.\nconstants: - name: LOCATION value: World - name: HELLO value: Hello $constants.LOCATION Using configuration values as variables it supported for many different fields, not just constants. You can also wrap your \u0026ldquo;variables\u0026rdquo; in brackets in case you\u0026rsquo;re using them in more advanced scenario\u0026rsquo;s where the variable parser might otherwise get confused, so for example you could use your constant like so:\nconstants: - name: LOCATION value: World - name: HELLO value: Hello ${constants.LOCATION} Secrets Constants are great if you just want to reuse certain values throughout your activestate.yaml file, but what if you want to store values that are sensitive, and which shouldn’t be stored in version control or in any plain text format? This is what “secrets” (or “state secrets”\u0026hellip; get it?) are meant for; the State Tool has built into it a very useful secret management solution. You should store any database passwords, API keys, and other sensitive credentials your project needs access to as secrets.\nA “secret” is similar to a constant, except that its value is securely stored on the ActiveState Platform. It is encrypted using RSA encryption in a manner that no one but you will ever be able to decrypt (unless you start sharing your password - which\u0026hellip; don’t do that!). Not even ActiveState knows the true value of your secrets; we only store the encrypted value. Secrets also have the concept of sharing, meaning you can share a secret with the people on your project.\nSecret Definitions versus Secret Values It\u0026rsquo;s important to differentiate between a secret definition and a secret value. You can define a secret without it having a value assigned yet. When a secret is defined but it has no value then the user will be prompted for a value when the secret is being used.\nSecret Scopes When talking about secrets we need to also talk about secret scopes. A scope describes who the secret value \u0026ldquo;belongs to\u0026rdquo;. Currently we support two scopes, \u0026ldquo;user\u0026rdquo; and \u0026ldquo;project\u0026rdquo;.\nThe \u0026ldquo;user\u0026rdquo; scope denotes a secret value as belonging to a user. This means that when you define a secret that is \u0026ldquo;user scoped\u0026rdquo; that every user will have to set their own value for this secret, to which only they have access.\nThe \u0026ldquo;project\u0026rdquo; scope denotes a secret value as belonging to everyone in the project. This means that when someone defines a secret value for such a secret that everyone in the project will get access to this value.\nSetting secrets To define a secret you use the command line tool, not the activestate.yaml. This is because secrets live on the ActiveState Platform (in client-side encrypted format \u0026ndash; we do not have access to the real values) and not in your local configuration file. We\u0026rsquo;ll want to use the state secrets command to define a new secret:\nstate secrets set project.secret-name secret-value This will create a secret named secret-name with the value secret-value that will be shared with everyone who has permissions for the project.\nIf, instead, you want to define a secret that only you have access to, you need to define a user secret by specifying user.secret-name:\nstate secrets set user.secret-name secret-value This will still define the secret for everyone on the project, but only you will have access to the value you\u0026rsquo;ve set. Anyone else that uses this secret will be prompted for their own value.\nRetrieving secrets Now that we have a secret defined we can start using it. To view secrets that exist for your current project you can run the state secrets command. This will produce a concise list of secrets, their “scope” (user or project) as well as a usage example (what you would use to set or retrieve their value).\nTo retrieve the value of a secret run:\nstate secrets get project.secret-name This will retrieve the value for a secret called secret-name whose value is shared with everyone in the project.\nUsing secrets So we can set and retrieve secrets, what about using them in our config (activestate.yaml)? This is actually very simple, and similar to how you use constants. Let’s use our “HELLO” constant from before but this time instead of referencing a constant called “LOCATION” we’ll reference a secret with that name instead. This syntax would look as follows:\nconstants: - name: HELLO value: Hello $secrets.user.LOCATION What’s happening here is the $secrets. prefix indicates that we want to “expand” our identifier as a secret, and the user.LOCATION bits identify it as a secret named LOCATION stored under the user. This syntax is compatible with the output of the “Usage” column when running state secrets to list your secrets. You can copy and paste that value right after the $secrets. prefix in your activestate.yaml file.\nIt\u0026rsquo;s important to note that you do not need to first define the user.LOCATION secret. If a secret does not yet exist you will instead be prompted for its value when you try to access it.\nScripts Scripts in the State Tool can be compared to scripts in NPM, or build targets in a Makefile. You define a script and can then run it whenever you need to. Let’s start with something simple:\nscripts: - name: hello value: echo Hello World This will register a script with the alias “hello”. You can run this outside your “activated state” via the state run command by running state run hello, but once you state activate it becomes much simpler, you simply invoke it by running hello.\nUsing Languages The above script would run under whatever shell the current system defaults to, so Bash on Linux/macOS and Batch on Windows. This is problematic if you are working on a cross-platform project. Sure you could use constraints, but wouldn\u0026rsquo;t it be easier if you could just use one single script for all platforms?\nFor this the State Tool supports languages. You can configure your project on the ActiveState Platform to include a Python or Perl runtime, after which can define a script to use that language, for example:\nscripts: - name: hello language: python3 value: print(\u0026#34;Hello World\u0026#34;) The following language settings are supported:\n   Language Description     bash For scripts that use bash (Bourne again shell).   sh For script that use sh (Bourne shell).   batch For scripts that use cmd.exe on Windows.   perl For scripts that use your Perl runtime environment.   python2 For scripts that use your Python 2 runtime environment.   python3 For scripts that use your Python 3 runtime environment.    Note: Support for specifying Tcl as the script language is not yet available.\nSee the section on Constraining Scripts for information on limiting language to the appropriate operating system. For example, only running batch scripts on Microsoft Windows.\nCalling Scripts From Other Scripts Calling one script from another is fairly straight forward, you can access scripts as \u0026ldquo;variables\u0026rdquo; the same as many other activestate.yaml structures. Let\u0026rsquo;s let the code do the talking:\nscripts: - name: hello language: python3 value: print(\u0026#34;Hello World\u0026#34;) - name: greeting language: python3 value: | $scripts.hello print(\u0026#34;How are you doing?\u0026#34;) When you execute state run greeting it will inject the value of the \u0026ldquo;hello\u0026rdquo; script into the \u0026ldquo;greeting\u0026rdquo; script. The resulting code that ends up being ran would look like this\u0026rdquo;\nprint(\u0026#34;Hello World\u0026#34;) print(\u0026#34;How are you doing?\u0026#34;) Calling Scripts by Their Path The above example can be problematic when you are running scripts in various languages. For example the following code would certainly fail:\nscripts: - name: hello language: python3 value: print(\u0026#34;Hello World\u0026#34;) - name: greeting value: | $scripts.hello echo \u0026#34;How are you doing?\u0026#34; Note that the \u0026ldquo;greeting\u0026rdquo; script does not have a language defined, this means it runs as either Bash or Batch depending on your platform. But the \u0026ldquo;hello\u0026rdquo; script is still Python code, which is being embedded in bash code, which will lead to some sort of syntax error.\nYou work around such an issue by calling the script by its file, rather than just embedding the code. To do this you can use the path() method that lives on all scripts. So the above code would become:\nscripts: - name: hello language: python3 value: print(\u0026#34;Hello World\u0026#34;) - name: greeting value: | $scripts.hello.path() echo \u0026#34;How are you doing?\u0026#34; Now the resulting script will look something like this:\n/tmp/7979234.script.py echo \u0026#34;How are you doing?\u0026#34; The file in question will have a shebang with our interpreter defined in it, so you don\u0026rsquo;t need to worry about providing the interpreter unless you are on Windows, which doesn\u0026rsquo;t support shebang. For cross-platform compatibility you could instead use:\n- name: greeting value: | python3 $scripts.hello.path() echo \u0026#34;How are you doing?\u0026#34; That way we\u0026rsquo;re explicitly saying Python is the interpreter for this file.\nUsing Constants \u0026amp; Secrets Scripts can use constants too, so for example you could instead use the following value:\nvalue: echo $constants.HELLO This also works for secrets, so instead of the above you could use echo $secrets.user.HELLO. It gets more interesting though, because in the activestate.yaml EVERYTHING is a “variable”, so you could create another command that references our first command:\nscripts: - name: log-hello value: $scripts.hello \u0026gt; /tmp/hello.txt You can see how used wisely this can quickly become very powerful.\nThe main use-case for scripts is to kick off builds, run tests, etc. But the sky’s the limit.\nScript Arguments Scripts support arguments too! Using the hello world sample again, you could define your script like so:\nscripts: - name: hello value: echo hello $1 Now you can run hello world or hello planet and it should print out the argument you passed.\nConstraining Scripts You can constrain scripts to only run on certain platforms. If a language is not specified for the script, they will be run as either bash or batch scripts, depending on the shell that you run them from. This can be problematic because bash and batch are two very different languages, and you might have cross-platform requirements. You can add constraints to your script entries to ensure that the correct command runs based on the operating system identified at run time. For example:\nscripts: - name: env value: printenv constraints: os: linux,macos - name: env value: set constraints: os: windows Now when you run state run env on Windows it will execute the windows constrained script, whereas when you run it on Linux or macOS it will run the script constrained to those platforms.\nConstraints can also be negative, so if you would want to run a script on any platform except windows you could use os: -windows.\nThe possible values for the OS constraint are:\n windows macos linux  These values can be given in a comma separate fashion, and include a minus character to exclude them (e.g. -windows).\nEvents OK so we have constants, secrets and scripts, but your project has some special needs. It might require certain services to be running, or for certain non-language-specific dependencies to be installed. For this you can hook into events, the most important event of which is the ACTIVATE event, as the name implies this event is triggered when you state activate.\nNOTE: Currently, ACTIVATE is the only available event. Additional events will be added in future releases.\nEvents act mostly the same as scripts do, except that they aren’t manually invoked and instead run when their event triggers. For example we could have an ACTIVATE event that looks like this:\nevents - name: ACTIVATE value: systemctl start my-service This would start a service whenever we enter an “activated state”. It’s worth noting that the ACTIVATE event has a special use-case: it is invoked as part of your bashrc (or zshrc, or fishrc, or ..) meaning it can export environment variables, register bash aliases, etc.\nSharing With Your Team Now that you have your activestate.yaml configuration file set up you can share it with your team. You can do this however you prefer, but if your team is using version control we recommend checking in your activestate.yaml file. As we add new capabilities you can update your configuration in the activestate.yaml file and share these capabilities with your team.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/",
	"title": "Command Reference",
	"tags": [],
	"description": "",
	"content": "  activate  Activate an ActiveState Platform project on your local computer.\n auth  Authenticate your account on the ActiveState Platform.\n clean  Remove the State Tool, any installed languages, and any configuration files.\n events  List the configured events for your project.\n export  Export JWT or recipe information.\n fork  Create a fork of an existing Platform project.\n history  List the commit history for your project.\n init  Create a new ActiveState Platform project.\n languages  List the languages in your project, and allows you to update the specified languages.\n organizations  Lists the organizations you are a member of.\n packages  Manage the packages within an ActiveState Platform project.\n platforms  List the platforms in your project, and allows you to add and remove platforms, and search for available platforms on the ActiveState Platform.\n projects  List the projects you have access to from all of the Organizations you belong to.\n pull  Update your activestate.yaml so that it references the latest version of your platform runtime environment.\n push  Push your local changes to the ActiveState Platform.\n run  Manually run scripts you have defined for your projects by name.\n scripts  List all available scripts.\n secrets  Manage secrets within a Project.\n show  Display information about the current project, or a specified remote project.\n update  Update the State Tool to the latest available version.\n "
},
{
	"uri": "https://activestate.github.io/documentation-public/state/ci/",
	"title": "Using State Tool on CI/CD",
	"tags": [],
	"description": "",
	"content": "You can use the State Tool with your Continuous Integration/Continuous Delivery (CI/CD) processes and and tools. You can use the State Tool to define simple and reliable processes for building, testing, and deploying your software projects.\nThe State Tool can be silently installed for your CI/CD, download a custom language runtime with your code\u0026rsquo;s specific language and package requirements, and run scripts as required throughout the build process.\nThe basic process you need to follow is:\n Gather environment variable settings: Retrieve the environment variables required to authenticate with the ActiveState Platform and (optionally) use secrets in your CI/CD configuration file and build scripts. CI/CD Setup: Configure the integration between your CI/CD and your code repository. For example, link your GitHub repository to your AppVeyor account and provide the necessary authorization to AppVeyor. Platform Setup: Create a Platform project with your language, platform (operating system), and package requirements. Configure activestate.yml: state activate to generate the activestate.yml file for the project and add it to your code repository. Build Setup: Add a configuration file to your repository with the build configuration for your CI/CD tool that installs the State Tool and runs any other build steps. For example, a Jenkinsfile for Jenkins, or a appveyor.yml file for AppVeyor. Webhook Setup: Add a webhook to your version control repository if required. In some cases this may be completed automatically when you are integrating your code repository with the CI/CD tool in step 2. In other cases, it may be a manual step you need to complete.   Setup and configuration for Jenkins Setup and configuration for AppVeyor. Also check out the related blog post Setup and configuration for Travis. Also check out the related blog post Setup and configuration for GitHub Actions. Also check out the related blog post  "
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/",
	"title": "Contributing",
	"tags": [],
	"description": "",
	"content": "  Changelog   Opening pull requests   Code contributions   Documentation contributions   How Do I...   Explorer   Guides   Reference   Development User Guide   Style guide   "
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/guides/toc/",
	"title": "Contents - Outline TOC",
	"tags": [],
	"description": "",
	"content": " GraphQL \u0026amp; ActiveState Platform   \u0026ldquo;GraphQL allows you to declaratively express your data needs\u0026hellip;queries are the representation of the data you need.\u0026rdquo; \u0026ldquo;Notice how the query signature exactly matches the returned JSON signature. This is possible because in GraphQL, you query against a schema that is the representation of your available data.\u0026rdquo; \u0026ldquo;GraphiQL is a UI that lets you 1) run queries against your data in the browser, and 2) dig into the structure of data available to you through a data type explorer.\u0026rdquo;\u0026rdquo;  Why we use GraphQl   What limitations are we solving for What benefits do we get from it? \u0026ldquo;GraphQL Query Options Reference\u0026rdquo; \u0026ldquo;This page will walk you through a series of GraphQL queries, each designed to demonstrate a particular feature of GraphQL.\u0026rdquo;  Running Queries with the GraphQL UI Using GraphiQL / GraphQL Playground  What is it? How to access it    "
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/reference/glossary/",
	"title": "Glossary",
	"tags": [],
	"description": "",
	"content": "API Build Cache CLI Compiler Environment Environment Variables Package Query Runtime Schema Source Code "
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/guides/builder/",
	"title": "Builder Fundamentals Guide",
	"tags": [],
	"description": "",
	"content": "What is the ActiveState Platform Builder? ActiveState Platform architecture diagram Package Database (aka Ingredients) Dependancy Resolver (aka Head Chef) Build Wrapper Design methodology Structure Example Supported build images Reference: Image Strawman\nCircleCI provides quite detailed inforamtion about the configurations they support that your build will run on.\nExecutors and Images\nPre-Build CircleCI Docker Images\nArtifacts References:\n Artifact Cache Key Components Artifacts Requirements Gathering  Best Practices Troubleshooting "
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/howto/",
	"title": "How Do I...",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/howto/add-packages/",
	"title": "Add Packages",
	"tags": [],
	"description": "",
	"content": "Step 1: Get your authentication token/API key and organization id The Dashboard API service is responsible for authenticating a user and providing a token that will need to be included in all future API requests to this service and all other services the user needs to communicate with.\nThis service is also responsible for knowing which organizations a user belongs to. In order to create a private ingredient, the ingredient needs to be associated with an organization, specifically an organization ID. After logging in, the ID of the organization the ingredient will belong to can be retrieved from this service.\nIf you are adding a private ingredient you will also need to get the\nStep 2: Check the list of available packages You can query the Inventory API to verify that the package and version you wnat to contribute does not currently exist in our package repository.\nStep 3: Create a package definition Define a GraphQL mutation with the information require to build the package. See the Mutations section for examples.\nStep 4: Submit your package to builder Submit the GraphQL query to add the new package entry and schedule a build. In the REST API this involves a number of calls:\n Submit the order to the /recipes endpoint Submit the recipe to the /builds endpoint Check /builds/{build_request_id} for status Once the build completes /builds will return an array of artifacts  For info on the new wrapper approach, see the [Wrapper Spec] document.(https://docs.google.com/document/d/1IEIloqyjckx_qKTQ-Hbo5-ilpNR53HsG_XRq8NjGvRo/edit)\nStep 5: View the results Depending on the complexity of the package you are building and the number of platforms you are building it for, the build process may take some time. If the build is successful you will be notfied that the package has been added to the inventory and a list of artifact links will be returned. Otherwise the builder will present you with failure information including the specific errors encountered and the full build log. For the steps to take to resolve any issues that arise, see Troubleshooting build failures (#troubleshooting-build-failures).\nTroubleshooting build failures  List things that they can fix and steps to take. Indicate issues they won\u0026rsquo;t be able to solve, who to contact, what the expected resolution time is.  "
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/reference/mutations/",
	"title": "Mutations",
	"tags": [],
	"description": "",
	"content": "mutation Ingredient ( name : \u0026#34;activestate/A\u0026#34; src : \u0026#34;data:,Hello%2C%20World!\u0026#34; builder : \u0026#34;activestate/builders/concat.sh@123\u0026#34; args: [ \u0026#34;hello.txt\u0026#34; ] ){ id revision timestamp } Response { \u0026#34;data\u0026#34; : { \u0026#34;id\u0026#34;: \u0026#34;AAA-83838-03030-83838\u0026#34;, \u0026#34;revision\u0026#34;: 0, \u0026#34;timestamp\u0026#34;: 1234 } } "
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/reference/queries/",
	"title": "Queries",
	"tags": [],
	"description": "",
	"content": "{ timestamp artifacts(attime=1234, platform=macos requirements=[\u0026#34;activestate/A\u0026#34;]) { name status revision urls } } Response { \u0026#34;data\u0026#34; : { \u0026#34;timestamp\u0026#34;: 1234, \u0026#34;artifacts\u0026#34; : [{ \u0026#34;name\u0026#34;: \u0026#34;activestate/A\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;BUILT\u0026#34;, \u0026#34;revision\u0026#34;: 0, \u0026#34;version\u0026#34;: 0, \u0026#34;urls\u0026#34;: [\u0026#34;http://activestate.com/storage/AAA-83838-03030-83838-activestate-A/hello.txt\u0026#34;] }] } } You can query the schema to discover details about the API interactively.\nRun in GraphiQL\n{ __schema{ types { name kind fields{ name description } } } } Run in GraphiQL\n{ __type(name:\u0026#34;FilmPreviousValues\u0026#34;) { name kind description fields{ name type { kind name } } } } "
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/explorer/",
	"title": "Explorer",
	"tags": [],
	"description": "",
	"content": "Placholder for GraphiQL based page\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/guides/",
	"title": "Guides",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/reference/",
	"title": "Reference",
	"tags": [],
	"description": "",
	"content": "Introduction GraphQL is a query language for your API. It provides a declarative method for the client to define the nested data it needs. The client can specify the data to expand or rename in their request.\nGraphQL gives you better control over the data transferred from the server because you can specify that exact fields and objects you want.\n\u0026ldquo;GraphiQL is an in-browser IDE for exploring GraphQL schemas where you can test queries and easily view the data being returned from the server.\u0026rdquo;\n\u0026ldquo;With GraphiQL, you’re provided with schema definitions from your GraphQL server and can explore what options are available without relying on your developers to make the API super descriptive.\u0026rdquo; vs. REST APIs where the developer is more dependant reading documentation to understand its uses and limitations\nSome features of GraphiQL are:\n Automatic query completion Syntax highlighting Inline suggestions for appropriate fields, arguments, types, etc. Syncronization with the current GraphQL schema Self documenting schema  About the GraphQL API What you need to know about GraphQL Queries Mutations About this guide Exploring the GraphQL API We\u0026rsquo;ve integrated GraphiQL. You can use it to explore and test the API in your browser.\nYou can also view the schema in our Github repository.\nSupport Feedback or additional questions We\u0026rsquo;re building this API, and the ActiveState Platform, for you. If you have a question, feature you would like to see, or need help with your implementation we\u0026rsquo;d love to hear from you. As an early adoptor, your feedback will help shape our development.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/devug/add-ingredient/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Chapter 1: Adding your first ingredient In order to add a new ingredient, it\u0026rsquo;s easiest to use the state tool to create a template ingredient file which you can add detail to. We\u0026rsquo;ll create an ingredient for a python module called mypymodule which we\u0026rsquo;ll suppose is ready for release. Run\nstate ingredient new mypymodule --version 0.0.1 --namespace language/python This will create a mypymodule directory under your current working directory with a single template file mypymodule.graphql in it. The file will look like this:\nmutation Ingredient ( name: \u0026#34;mypymodule\u0026#34; # name of the ingredient primary_namespace: \u0026#34;language/python\u0026#34; # the namespace the ingredient should # belong to description: # a short description of the ingredient website: # the ingredient\u0026#39;s website, if it has one versions: [ { version: \u0026#34;0.0.1\u0026#34; # the raw version of the ingredient is_stable_release: true # true if this release is stable,  # false otherwise release_timestamp: \u0026#34;1970-01-01T00:00:00.000000Z\u0026#34; # date/time of release source_uri: # URI to the source code as a zip  build_rule: { platform: [] # a list of platform features required  # for this toolchain to be selected toolchain: python-builder # URI to a toolchain implementation } provided_features: [ feature: \u0026#34;mypymodule\u0026#34; # name of the feature this version  # provides, usually the ingredient # name version: \u0026#34;0.0.1\u0026#34; # version of the feature provided is_default_provider: true # false if this is an alternative  # provider for a feature namespace: \u0026#34;language/python\u0026#34; # namespace of the feature, usually  # the same as the namespace of the  # ingredient ] } ] ){ id revision timestamp } This represents the minimum level of information required by the ActiveState Platform to incorporate and build this module and much of it has been pre-filled. It takes the form of a graphql mutation which gives us a great deal of flexibility in what information we want to submit to the platform about our ingredient. Go ahead and open this file in your favourite editor and we\u0026rsquo;ll tackle the data section-by-section.\nGeneral info name: \u0026#34;mypymodule\u0026#34; # name of the ingredient primary_namespace: \u0026#34;language/python\u0026#34; # the namespace the ingredient should # belong to description: # a short description of the ingredient website: # the ingredient\u0026#39;s website, if it has one These represent some basic information about the ingredient; name is autofilled by the state tool based on the arguments to state ingredient new, as is primary_namespace. The platform has a range of namespaces, described further in the Namespaces document but for now, all we need to know is that language/python is the correct choice for a python module. The descripton field is a short (a few words) description of the module and the website should be the URL of the module\u0026rsquo;s home page. This latter field is optional, but included here because most projects will have one, even if it is a just a hosted git repo.\nLet\u0026rsquo;s fill those in:\ndescription: \u0026#34;The most awesome Python module\u0026#34; website: \u0026#34;https://example.org/mypymodule\u0026#34; Versions versions: [ The platform supports uploading data about multiple versions in one submission, but we\u0026rsquo;re only adding a single version so we can use a single object array.\n{ version: \u0026#34;0.0.1\u0026#34; # the raw version of the ingredient is_stable_release: true # true if this release is stable,  # false otherwise release_timestamp: \u0026#34;1970-01-01T00:00:00.000000Z\u0026#34; # date/time of release source_uri: # URI to the source code as a zip  The state tool has added the version string we specified in the arguments to state ingredient new. It\u0026rsquo;s added here rather than at the top level as, as explained above, we are able to submit multiple versions at once should we so wish. The is_stable_release flag is to indicate whether or not this is a stable release as opposed to a beta or release candidate. The platform also requires the release_timestamp for the version, which indicates when this version was released to the world as opposed to the date it was added to the platform. The default timestamp shown here is for illustration purposes only, to show the required format (TODO: other formats may be usable here too?). Finally, the source_uri field tells the platform where it can download the source code for this version from as a tarball or zip file.\nLet\u0026rsquo;s fill in the missing information:\nrelease_timestamp: \u0026#34;2019-09-15T12:00:00.000000Z\u0026#34; source_uri: \u0026#34;https://example.org/mypymodule/download/mypymodule-0.0.1.tar.gz\u0026#34; Build information build_rule: { platform: [] # a list of platform features required  # for this toolchain to be selected toolchain: python-builder # URI to a toolchain implementation } The build_rule section is where we tell the platform how to build our module. In this case, our module is designed to be built and installed with python\u0026rsquo;s setuptools so we can safely use the python-builder toolchain on all platforms. We don\u0026rsquo;t need to specify any platform constraints (e.g. operating system, cpu architecture) for this, although we could specify different toolchains to use on e.g. linux and windows should we need to. Toolchains are discussed further in the Toolchains document.\nFeature provision provided_features: [ feature: \u0026#34;mypymodule\u0026#34; # name of the feature this version  # provides, usually the ingredient # name version: \u0026#34;0.0.1\u0026#34; # version of the feature provided is_default_provider: true # false if this is an alternative  # provider for a feature namespace: \u0026#34;language/python\u0026#34; # namespace of the feature, usually  # the same as the namespace of the  # ingredient ] This section tells the platform about the features that this module provides. The platform supports the notion of several ingredients being able to provide the same feature so that alternative providers are available should project maintainers want to give users a choice when dependencies are being resolved. This gives users, for example, the option to choose from 2 API-compatible libraries to provide implementations of that API as in the case of OpenSSL and LibreSSL. Here, we are the only provider of our module\u0026rsquo;s API so we will fill in the details of our module, essentially declaring that we are providing mypymodule's API and/or other feature set and declaring that our module should be the default provider for anything that requires mypymodule via the is_default_provider field. Features are discussed in more detail in the Features document.\n){ id revision timestamp } This last section is what we would like to be told about our newly created ingredient once it is created: the system-assigned id, the revision of the ingredient we created (discussed further in Revisions) and the platform timestamp of when the ingredient was added to the platform.\nNow we\u0026rsquo;ve filled in the blank portions, we can submit this new ingredient to the platform using state ingredient add mypymodule.graphql\nTODO: discussion of error conditions and how to correct them "
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/devug/adding-dependencies/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Chapter 2: Adding dependencies When writing our mypymodule python module, we decided to use some other open source modules to help out, specifically we decided to use the popular numpy and scipy modules. We need to tell the platform that these modules are required by anyone who wants to use mypymodule. If we have been preparing our module for installation with pip and have a requirements.txt, a pipfile or a pyproject.toml, we can request that the state tool scan our project and add these dependencies to our ingredient graphql file:\nstate ingredient scan /path/to/mypymodule/source or if we\u0026rsquo;re hosting our source on, e.g. Github, we could type:\nstate ingredient scan https://github.com/AwesomeProjects/mypymodule.git These are convenient ways to add dependency information to our ingredient, and create a dependecy_sets section in our ingredient file. We can also create these manually.\nManual dependency declaration dependency_sets: [ dependencies: [ { conditions: # conditions required for this  # dependency to apply, usually null feature: # name of the feature we depend on,  # e.g. another ingredient, build  # tool etc. namespace: # namespace of the feature, e.g.  # \u0026#39;language\u0026#39;, \u0026#39;image\u0026#39; requirements: { comparator: # how we should compare versions,  # e.g. \u0026#39;gte\u0026#39;, \u0026#39;eq\u0026#39;, \u0026#39;lte\u0026#39; version: # the version of the feature we require } } ] description: # description of the dependency type: # type of this dependency, e.g. \u0026#39;build\u0026#39;, # \u0026#39;runtime\u0026#39;, \u0026#39;test\u0026#39; ] "
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/devug/extended-toolchain-example/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Extended toolchain descriptor for an ingredient Composable toolchains Note: This document describes how an ingredient would describe the toolchain(s) required to build it, not how we would define a toolchain within the platform\nThis is a sample blank ingredient with an example of a possible extended toochain descriptor. Note it has an executor toolchain which should be present on the build image and whose definition should contain the mechanism for running this kind of build. It also has multiple adjunct toolchains which only need to be present on the build image. Together with any platform restrictions listed here and the platform restrictions which come in via the order, these form a set of constraints for the build image.\nAll toolchain definitions should declare multiple platform variants, the variant to be chosen by the solver based on order constraints (e.g. devtoolset-6 on CentOS7 with cpu x86_64 would resolve to a unique concrete instance of a toolchain)\nWe may want to allow multiple toolchains of the same type to be present in the same image (e.g. devtoolset-6 and devtoolset-7) where this is possible. In this case, the toolchain definitions should contain mechanisms for selecting themselves for the build (e.g. set PATH, use debian alternatives, run vcvars.bat)\nThe extended descriptor below has features to supply options to a toolchain in both generic (e.g. env vars) and toolchain-specific (e.g. conf_args) sections. The sections applicable to a toolchain should be composed from a generic set and any defined by the toolchain itself. It also supplies a mechanism (dubbed translations below) in which a toolchain descriptor may flesh out (or override) how certain build flags are expressed. In this example, we state that a request for a debug build should be expressed as a new configure argument (--enable-symbols) and that a thread-enabled build should be expressed as both a configure argument (--enable-threads) and an additional environment variable (LIBS=-lpthread)\nname: # the name of the ingredient primary_namespace: # the namespace the ingredient should belong to description: # a short description of the ingredient website: # the ingredient\u0026#39;s website, if it has one versions: - version: # the raw version of the ingredient authors: # a list of the authors, by name copyright_text: # the body of the license license_expression: Unknown release_timestamp: \u0026#39;1970-01-01T00:00:00.000000Z\u0026#39; documentation_uri: # URI of the documentation for this version, if known is_binary_only: # false if the source code is available, true otherwise source_uri: # URI to the source code as a zip file or tarball build_rule: - platform: [] # a list of platform features required for this toolchain toolchain: - executor: - autoconf: 1.2.3 env: - var1: value1 - var2: value2 conf_args: - flag1: value1 - flag2: value2 translation: # need a better name for this. expression? override? - debug: - conf_args: - enable-symbols: - threaded: - conf_args: - enable-threads: - env: - LIBS: -lpthread - adjunct: - devtoolset: 6 X11-dev: 4 is_stable_release: # true if this release is stable, false otherwise provided_features: - feature: # name of the feature this version provides, usually the ingredient name version: # version of the feature provided is_default_provider: # false if this is an alternative provider for a feature namespace: # namespace of the feature, usually the same as the namespace of the ingredient dependency_sets: - dependencies: - conditions: # conditions required for this dependency to apply, usually null feature: # name of the feature we depend on, e.g. another ingredient, build tool etc. namespace: # namespace of the feature, e.g. \u0026#39;language\u0026#39;, \u0026#39;image\u0026#39; requirements: - comparator: # how we should compare versions, e.g. \u0026#39;gte\u0026#39;, \u0026#39;eq\u0026#39;, \u0026#39;lte\u0026#39; version: # the version of the feature we require description: # description of the dependency original_requirement: null type: # type of this dependency, e.g. \u0026#39;build\u0026#39;, \u0026#39;runtime\u0026#39;, \u0026#39;test\u0026#39; "
},
{
	"uri": "https://activestate.github.io/documentation-public/user/dashboard/",
	"title": "About Your Dashboard",
	"tags": [],
	"description": "",
	"content": "Accessing Your Dashboard Your Dashboard is the first page you see when you sign in to the ActiveState Platform.\nTo access Your Dashboard anytime after you\u0026rsquo;re signed in, click Your Dashboard at the top center of any page.\nFinding your projects and organizations The main page on Your Dashboard lists your most recently modified projects and the organizations you belong to. Click on the Projects tab to view a complete list of your projects.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/activate/",
	"title": "activate",
	"tags": [],
	"description": "",
	"content": "Activate an ActiveState Platform project on your local computer.\nActivating is the process of downloading the build associated with the project, which includes the language interpreter and the set of packages selected for the project, and creating a virtual environment for the interpreter to run in.\nFor example, when you run state activate ActiveState/ActivePython-3.6, ActivePython 3.6 and all selected packages are installed and configured, and a virtual environment is created. This allows you to run code in the project directory using your specific project configuration.\nIf you have system or other installed versions of Python on the computer they are not affected by the activated project, and the activated project is totally isolated from any existing Python configuration. This ensures that you are working with a clean environment that will not be affected by dependencies in other projects.\nUsage state activate [--path \u0026lt;path\u0026gt;] state activate \u0026lt;owner/projectName\u0026gt; [--path \u0026lt;path\u0026gt;] Use the path flag to specify the directory to activate the project in, so you are not prompted to choose the default location or enter a different directory.\nstate activate You can run state activate without any arguments if you are inside a directory that has an activestate.yaml configuration file in its parent directory structure. This will activate that activatestate.yaml.\nstate activate \u0026lt;owner/projectName\u0026gt; This will activate a project for the first time, or from a directory other than the project directory.\nThe \u0026ldquo;owner\u0026rdquo; argument is your username or the organization name that the project belongs to.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/glossary/",
	"title": "ActiveState Platform Glossary",
	"tags": [],
	"description": "",
	"content": "   Commit       Dashboard       Fork       Open source       Organization       Private project       Project       Tier       User   Users are personal ActiveState Platform accounts. Each user has a personal profile and can create projects and organizations. Users that belong to a organization on a paid tier can create private projects.\n  "
},
{
	"uri": "https://activestate.github.io/documentation-public/projects/secrets/",
	"title": "Adding Secrets to your project",
	"tags": [],
	"description": "",
	"content": "Secrets are for sensitive information that needs to be shared between environments and people working on a project. For example, you can securely store API keys and database passwords using secrets. Secrets are client-side encrypted values, meaning that they are not stored on our servers and ActiveState cannot access your secret values.\nTo add a secret to your project:\n In Your Dashboard, select the organization that contains the project you want to add a secret to and then click the Projects tab, or click the Projects tab in your dashboard to add a secret to a personal project. Click the project to open. Click the Scripts tab. Click Secrets in the Scripts menu. Click Add a Secret. Enter a name for the secret, and optionally enter a description. Select the scope of the secret:  Project: The secret is visible to all users who have permissions to activate the project. The value of the secret is shared between members of the organization. User: Each user sets their own value and only that user can see it.   Click Add Secret.  When you activate a project that contains a secret with no value defined, you will be prompted for the value. Alternatively, click on the arrow next to the secret name on the Secrets page to expand the instructions for setting the secret value manually using the State Tool.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/state/ci/appveyor/",
	"title": "AppVeyor",
	"tags": [],
	"description": "",
	"content": "The following sections describe the tasks you need to complete to set up a CI/CD process with AppVeyor, your version control system (VCS), and the ActiveState Platform. You need the appropriate access to these systems to complete the setup. In the examples below, we show configuration steps for GitHub specifically. You may need to adjust some of the tasks if you are using a different VCS.\nGathering environment variable settings Before you begin:\n You need an ActiveState Platform account. If you do not currently have an account you can sign up for free at: https://platform.activestate.com/create-account. You need to have the State Tool installed on your computer, and authorized with the Platform using the state auth command, in order to run the command to retrieve the API key, and to access your private.key file if you are using secrets.  The State Tool will use the following environment variables if they are defined:\n ACTIVESTATE_API_KEY: This API key is used to authenticate the State Tool with the ActiveState Platform, as required, to download language projects, update packages, etc. If you use ActiveState Platform secrets in your build process or scripts run by the build process, you must also configure the ACTIVESTATE_PRIVATE_KEY. ACTIVESTATE_PRIVATE_KEY: Optional. The private key to use for decrypting secrets.  Obtaining your API Key Currently, you can only generate an API Key by calling our API directly using a curl command. Open your command prompt, and copy and paste or enter the following command:\ncurl -X POST \u0026#34;https://platform.activestate.com/api/v1/apikeys\u0026#34; \\ -H \u0026#34;accept: application/json\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34; \\ -H \u0026#34;Authorization: Bearer `state export jwt`\u0026#34; \\ -d \u0026#34;{ \\\u0026#34;name\\\u0026#34;: \\\u0026#34;APIKeyForCI\\\u0026#34;}\u0026#34; Example response:\n{ \u0026#34;name\u0026#34;: \u0026#34;APIKeyForCI\u0026#34;, \u0026#34;token\u0026#34;: \u0026#34;MjZlMGI5YzQtYzFkMS00MmUxLTllYjAtODRjMjA5YzVjZTNmXlFhQ3llUW9WeGlzaTUxNzku\u0026#34;, \u0026#34;tokenID\u0026#34;: \u0026#34;26e0b9c4-c1d1-42e1-9eb0-84c209c5ce3f\u0026#34; } In this example, you would copy the token value to use as the ACTIVESTATE_API_KEY environment variable in your CI/CD application: MjZlMGI5YzQtYzFkMS00MmUxLTllYjAtODRjMjA5YzVjZTNmXlFhQ3llUW9WeGlzaTUxNzku\nObtaining your Private Key You can find the private key value at \u0026lt;configdir\u0026gt;/activestate/cli-unstable/private.key.\nThe configdir varies per platform, but in most cases will be at one of:\n Windows: %HOME%\\AppData\\Roaming\\activestate\\cli-unstable\\ Linux: ~/config/activestate/cli-unstable/ macOS: ~/Library/Application\\ Support/activestate/cli-unstable/  The private key environment variable expects the contents of the private.key file, not the filepath.\nAppVeyor setup  Log in to Appveyor CI at http://appveyor.com. Click New Project. Click Update Installations On the Install AppVeyor page, select the organization your code repository belongs to, and follow the steps on screen to authenticate with GitHub and configure the selected repository integration with AppVeyor. Click Add next to the new repository entry in AppVeyor. Click the Settings tab on the project page. Click Environment. Click Add variable Enter the name and value for each API key you want to use and click the lock icon to encrypt the value. For information on the required values, see Obtaining your API key and, if applicable, Obtaining your private key. IMPORTANT: The ACTIVESTATE_API_KEY is used to authenticate the State Tool automatically whenever required by the CI/CD build steps.  ActiveState Platform project setup You can use either the Dashboard or the State Tool to create a new project and add the language, platforms, and packages your project requires. Set up your project by:\n Creating a new custom project Copying and editing (forking) an ActiveState project Use the state init and state packages commands to create a new project and add the language, platforms (operating systems), and package requirements your code project needs.  Configure activestate.yaml After you create an ActiveState project, complete the following steps to activate your project and add the configuration file to your code repository, so that the CI/CD has access to it.\n Open your command prompt and navigate to the top level folder where you want to create your ActiveState Platform project. Enter state activate \u0026lt;owner/project_name\u0026gt;. For example: state activate acmetech/python-3-6-6. Copy the activestate.yaml configuration file to the root directory of your code repository. Edit the activestate.yaml to add any scripts, variables, or secrets you want CI/CD to run or have access to. For more information on these options, see Getting started. Add activestate.yaml to the repository and check in your changes.  Add an appveyor.yml file You need to add an appveyor.yml file to the root of your code repository that includes all of the steps required to build, test, and deploy your code. The example provided demonstrates the State Tool-specific steps for installing the State Tool and running scripts that are defined in the activestate.yaml file for the project. The AppVeyor project is configured to build on Windows.\nversion: 1.0.{build} image: Visual Studio 2019 init: - ps: \u0026#39;\u0026#39; install: - ps: \u0026gt;- (New-Object Net.WebClient).DownloadFile(\u0026#39;https://platform.activestate.com/dl/cli/install.ps1\u0026#39;, \u0026#39;install.ps1\u0026#39;) Invoke-Expression \u0026#34;install.ps1 -n\u0026#34; build_script: - cmd: state --version test_script: - cmd: \u0026gt;- state pull state run pip_install_pkgs_win state run build_installer_win dir The scripts being executed in the appveyor.yml file are defined in the scripts section of the activestate.yaml file for the project:\nscripts: - name: clean description: Run the data cleaner script value: python3 cleaner.py - name: which-python description: Determine which python interpreter is being used language: python3 value: | import sys print(\u0026#34;Python script running with: \u0026#34;, sys.executable) If you successfully configured your AppVeyor CI project, you will see a job start and complete successfully each time someone pushes new code changes to the repository.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/auth/",
	"title": "auth",
	"tags": [],
	"description": "",
	"content": "Authenticate your account on the ActiveState Platform.\nUsage To authorize your account:\nstate auth [--username \u0026lt;value\u0026gt;] [--password \u0026lt;value\u0026gt;] [--token \u0026lt;value\u0026gt;] To sign out from the Platform:\nstate auth logout To start the sign up process on the command line:\nstate auth signup state auth If no username, password or token is provided you will be prompted for your ActiveState Platform username and password.\n --username \u0026lt;value\u0026gt;: Manually provide a username. --password \u0026lt;value\u0026gt;: Manually provide a password. --token \u0026lt;value\u0026gt;: Manually provide a token (this cannot be used with --username)  state auth logout Logs you out.\nstate auth signup You can use the signup argument to sign up for an account on the ActiveState Platform. You will be prompted for a username and password, your full name, and your email address. Your account will have limited access to the ActiveState Platform until you click the link in the confirmation email sent from the Platform to validate your email address.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://activestate.github.io/documentation-public/user/prefs/password/",
	"title": "Change Password",
	"tags": [],
	"description": "",
	"content": "You can change your password at any time in the Change Password page.\nTo change your password:\n Click menu at the top right of the page that displays your username, and select Account Settings. Click the Change Password link. Enter the current password you sign in with in Current Password. Enter your new password in New Password and Confirm New Password. Click Save Changes.  If your password is successfully changed a notice is displayed, and the next time you access the Platform you will need to sign in with your new password.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/clean/",
	"title": "clean",
	"tags": [],
	"description": "",
	"content": "Remove the State Tool, any installed languages, and any configuration files.\nUsage state clean You can use the optional --force or '-f flag to execute the command without any confirmation prompts.\nIf you want to access the latest version, you do not have to uninstall the current version. You just need to run the state update command.\nRelated Information update Command\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/organizations/create/",
	"title": "Creating Organizations",
	"tags": [],
	"description": "",
	"content": "Organizations allow you to group your projects and the users permitted access to those projects. Every project belongs to an organization, and each organization is separate. An organization has one or more members. You can create, or be invited to, more than one organization. For example, you could create an organization for your personal work or side project, and also be invited to join your company\u0026rsquo;s organization.\nTo create an organization:\n  Click menu at the top right of the page that displays your username, and select Account Settings.\n  Click Organizations.\n  Click Create a New Organization.\n  In Organization Name, enter the name to display in the ActiveState Platform.\n  Accept the suggested URL based on your Organization Name, or specify a shorter, easier to remember URL.\n  Click Create Organization.\nWhen you create an organization, you are automatically assigned ownership of the Organization, which allows you to invite and manage users for the Organization.\n  The next step after creating a new Organization is to invite users. For more information, see Sending invites.\n  "
},
{
	"uri": "https://activestate.github.io/documentation-public/projects/requirements-txt/",
	"title": "Creating projects from requirements.txt files",
	"tags": [],
	"description": "",
	"content": "If you have an existing Python project that you want to add to the Platform, you can export a requirements.txt file to get a list of packages and versions to import into your Platform project, or you can type in the list of packages and versions manually.\nGenerating requirements.txt files To generate a requirements.txt file:\n  You can write out the requirements for an existing project to a requirements.txt file using one of the following commands at your command prompt:\n# python2 python -m pip freeze \u0026gt; requirements.txt # python3 python3 -m pip freeze \u0026gt; requirements.txt   Creating new projects To create a project from requirements.txt:\n Navigate to your organization and create a new project by clicking Build a Custom Runtime. You must choose Python as the language. Click Import from requirements.txt in the Requested Packages panel. Open the requirements.txt to use and copy and paste the content, or type in your requirements individually.   Click Import. The Platform parses each entry in your requirements.txt file and validates the syntax, and identifies any issues. When the file is valid, the platform attempts to match each package requirement with a package and version available on the platform. For supported syntax, see requirements.txt syntax.\n  If any errors or mismatches are identified between the requirements you have defined in your requirements.txt file and the package and versions available on the Platform, you may be able to adjust the package versions individually to create a valid build request.\n  Click Commit Changes. In Requested Packages you will see each package listed, along with the requested version and the version selected by the Platform to fulfill the requirement.\n  Click View Status to start the build and view the build progress. It may take some time for the build to succeed or fail, but you will receive an email notification when the build finishes.\n  Once the build completes successfully, you have two options for accessing your build:\n You can download the installer(s) for your platform(s) Install and configure the new project using the State Tool.    Updating existing projects To update an existing project using requirements.txt:\n Navigate to the Python project you want to update. Click the Configuration tab. Click Import from requirements.txt in the Requested Packages panel. Open the requirements.txt to use and copy and paste the content, or type in your requirements individually.  Click Import.  requirements.txt syntax  You must specify one requirement per line. You can specify just the package name and let the Platform choose the version each time a build is created. The Platform will choose the latest version, unless a different version is required based on the other packages included in the project. You can provide requirement specifiers for individual packages using the standard pip requirement specifier syntax:     Requirement specifier Name Description     == Equal to An exact match is required.requests==2.18.4   \u0026gt; Greater than Use any version greater than the specified version.requests\u0026gt;2.18.4   \u0026gt;= Greater than or equal to Use any version greater than the specified version.requests\u0026gt;=2.18.4   \u0026lt; Less than Use any version less than the specified version.requests\u0026lt;2.18.4   \u0026lt;= Less than or equal to Use any version less than or equal to the specified version.requests\u0026lt;=2.18.4   ~= Compatible version Use any version greater than or equal to the specified version, but not greater than the current release series.~=1.4.2 matches 1.4.2 through 1.4.9) but does not match 1.5.0    Some requirement specifier syntax is not applicable to the ActiveState Platform and is not supported:\n Environment markers (e.g. SomeProject ==5.4 ; python_version \u0026lt; '2.7') are not supported. Instead, you should specify the appropriate package requirement specifier for your Platform project\u0026rsquo;s Python version. Direct references (e.g. SomeProject @ file:///somewhere/...) are not supported because all of the requirements for a Platform project must come from the Platform.   "
},
{
	"uri": "https://activestate.github.io/documentation-public/user/prefs/datetime/",
	"title": "Date &amp; Time",
	"tags": [],
	"description": "",
	"content": "You can change the way dates and times are displayed in the ActiveState Platform and the timezone that is used.\n Click menu at the top right of the page that displays your username, and select Account Settings. Click the Date \u0026amp; Time Format link. From Date \u0026amp; Time Format, select the date/time format to use from the available options. From Time Zone, select the time zone to use from the drop-down list. You can start typing the time zone name to filter the list of options displayed. Click Submit to save your changes. "
},
{
	"uri": "https://activestate.github.io/documentation-public/organizations/deleting/",
	"title": "Deleting Organizations",
	"tags": [],
	"description": "",
	"content": "You can delete an organization if you are an Owner of the organization.\n Click Your Dashboard at the top of any page. Click the name of the organization you want to delete in the Your Organizations list. Click Settings. Click Delete this Organization. Click Yes to permanently delete the organization.  "
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/devug/",
	"title": "Development User Guide",
	"tags": [],
	"description": "",
	"content": " Basics Requirements Versions Packaging  "
},
{
	"uri": "https://activestate.github.io/documentation-public/user/prefs/email/",
	"title": "Email Addresses",
	"tags": [],
	"description": "",
	"content": "You can add or change the email addresses associated with your ActiveState Platform account.\nFor example, if you switch jobs you can maintain access to the Platform by setting your personal email or the the email for your new job as your primary email for the Platform.\n Click menu at the top right of the page that displays your username, and select Account Settings. Manage your email addresses in the Email panel:  To add an additional email, enter the email address and click Add. To delete an email, click the Delete link on the same line as the email to remove. To set an email as the primary email for your account, click the Set as Primary link on the same line as the email.    Email alerts and other correspondence will be sent to the primary email account. You can use any of the emails associated with your account as your username to log in to the ActiveState Platform.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/events/",
	"title": "events",
	"tags": [],
	"description": "",
	"content": "List the configured events for your project.\nEvents are scripts or commands that run when particular State Tool application events occur. For example, you can run a command to start your local web server each time you state activate your project.\nUsage state events Related Information Events\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": "Export JWT or recipe information.\nYou can export the contents of the JSON Web Token (JWT) you are using to authenticate with the Platform, or the build recipe (the set of packages and operating system settings) used by your project.\nUsage To print your JWT credentials:\nstate export jwt To print a JSON formatted recipe:\nstate export recipe To print the recipe for a particular commit:\nstate export recipe \u0026lt;commitID\u0026gt; You must run the state export command from the directory for the Platform project you want to export the build recipe for.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/projects/featured-projects/",
	"title": "Featured Projects: ActiveState Community Edition projects",
	"tags": [],
	"description": "",
	"content": "A number of Community Edition language distributions are available on the Featured Projects page for ActivePerl, ActivePython, and ActiveTcl. These are ActiveState Platform projects, maintained by ActiveState.\n  Navigate to the Featured Projects page at https://platform.activestate.com/featured-projects.\n  Browse the list of available projects and click the operating system image for the language distribution you want to download.\n  If you are not signed in to the Platform, you will be redirected to the Sign In page:\n If you already have an ActiveState Platform account enter your username and password and then click Sign In. If you want to sign in using your GitHub credentials, click Sign in with Github. You will be prompted to authorize GitHub to provide ActiveState with your email address. If you do not already have an ActiveState Platform account, click Create an Account enter the required information and click Create Account.    Ensure that the tab for the operating system you want to download is selected, and click the Download button to download the installer. You can also click Fork It next to the project to create a copy of the project, or click the Overview tab to view the included packages before you download or fork it.\n  "
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/devug/01-basics/",
	"title": "First principals",
	"tags": [],
	"description": "",
	"content": "Ingredient A whose source is the content \u0026ldquo;Hello World!\u0026rdquo; It uses the concat builder and sends the hello.txt argument\nRequest\nmutation Ingredient ( name : \u0026#34;activestate/A\u0026#34; src : \u0026#34;data:,Hello%2C%20World!\u0026#34; builder : \u0026#34;activestate/builders/concat.sh@123\u0026#34; args: [ \u0026#34;hello.txt\u0026#34; ] ){ id revision timestamp } Response\n{ \u0026#34;data\u0026#34; : { \u0026#34;id\u0026#34;: \u0026#34;AAA-83838-03030-83838\u0026#34;, \u0026#34;revision\u0026#34;: 0, \u0026#34;timestamp\u0026#34;: 1234 } } A builder is just a shell script in a git repo Note the concat builder takes a url and saves it\u0026rsquo;s results to the name that was set as the first argument.\nIt\u0026rsquo;s implementated in the ActiveState/builders git repo\nbuilders/ concat.sh It\u0026rsquo;s contents are simply (note being hand wavy on how you get a data url to contents is bash\u0026hellip;)\necho data_url_to_file($SRC) \u0026gt; $out/$1 We can retreive the artifacts for the ingredient if it were built at time 1234 The artifacts() query will return a list of artifact records that include it\u0026rsquo;s status, version and revisions. Each artifact will have a list of URLs that are the output results after the build process.\nRequest\nquery { timestamp artifacts(attime=1234, platform=macos requirments=[\u0026#34;activestate/A\u0026#34;]){ name status revision urls } } Response\n{ \u0026#34;data\u0026#34; : { \u0026#34;timestamp\u0026#34;: 1234, \u0026#34;artifacts\u0026#34; : [{ \u0026#34;name\u0026#34;: \u0026#34;activestate/A\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;BUILT\u0026#34;, \u0026#34;revision\u0026#34;: 0, \u0026#34;version\u0026#34;: 0, \u0026#34;urls\u0026#34;: [\u0026#34;http://activestate.com/storage/AAA-83838-03030-83838-activestate-A/hello.txt\u0026#34;] }] } } Defining an ingredient with a dependency There is an ingredient B who depends on A\nRequest\nmutation Ingredient ( name : \u0026#34;activestate/B\u0026#34; src : \u0026#34;http://activestate.com/some-other-file\u0026#34; builder: activestate/builders/zip.py@123 requires [ Any(\u0026#34;activestate/A/hello.txt\u0026#34;) ; Requires Any activestate/A that has a hello.txt ] ){ timestamp id revision } Response\n{ \u0026#34;data\u0026#34; : { \u0026#34;timestamp\u0026#34;: 1235, \u0026#34;id\u0026#34;: \u0026#34;BBB-83838-03030-83838\u0026#34;, \u0026#34;revision\u0026#34;: 0 } } Above we created an ingredient B who depends on A and uses some-other-builder.py to build it whose contents look like this:\nfrom zipfile import ZipFile import os import json SRC = os.environ[\u0026#39;SRC\u0026#39;] OUT = os.environ[\u0026#39;OUT\u0026#39;] REQUIREMENTS = json.loads(os.environ[\u0026#39;REQUIREMENTS\u0026#39;]) OUT_PATH = os.path.join(OUT, os.path.basename(SRC), \u0026#39;.zip\u0026#39;) with ZipFile(OUT_PATH, \u0026#39;w\u0026#39;) as myzip: myzip.write(SRC) myzip.write(REQUIRMENTS[\u0026#39;activestate/A/hello.txt\u0026#39;]) Note this time we used a builder script written in python which creates a new zipfile named after our SRC (in this case some-other-file.zip). In the zip is placed the SRC which is http://activestate.com/some-other-file AND hello.txt which was available from activestate/A.\nRequirements are passed as a JSON structure, the contents and other metadata is available in the REQUIREMENTS json structure. The zip builder uses this information to locate the contents of hello.txt and include it in the some-other-file.zip\nRequest\nquery { timestamp artifacts(attime=1234, platform=macos requirments=[\u0026#34;activestate/B\u0026#34;]){ name status revision urls } } Response\n{ \u0026#34;errors\u0026#34; : { \u0026#34;message\u0026#34;: \u0026#34;There are no ingredients that sastisfy the requirement activestate/B at or before timestamp 1234\u0026#34; } } Ack! What happened! Note every addition to the graph is kept for all time. We added activestate/B some time after 1234. In order to maintain reproducability, certain queries like archive() require a attime:Timestmap to determine which changes it will consider when making the build. Because we specified a timestamp prior to the addition of activestate/B the system is telling us it does not exist. Let\u0026rsquo;s try again with an updated timestamp.\nRequest\nquery { timestamp artifacts(attime=2007, platform=macos requirments=[\u0026#34;activestate/A\u0026#34;]){ name status revision urls } } Response\n{ \u0026#34;data\u0026#34; : { \u0026#34;timestamp\u0026#34;: 1235, \u0026#34;artifacts\u0026#34; : [{ \u0026#34;name\u0026#34; :\u0026#34;activestate/B\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;BUILT\u0026#34;, \u0026#34;revision\u0026#34;: 0, \u0026#34;version\u0026#34;: 0, \u0026#34;urls\u0026#34;: [\u0026#34;http://activestate.com/storage/BBB-83838-03030-83838-activestate-B/some-other-file.zip\u0026#34;] } ] } } Because we asked for activestate/B we only received the artifacts for B. There\u0026rsquo;s nothing stopping us from asking for both the artifacts of A and B\nquery { timestamp artifacts( attime=2007, platform=macos, requirments=[ \u0026#34;activestate/A\u0026#34; \u0026#34;activestate/B\u0026#34; ] ){ name status revision urls } } Response\n{ \u0026#34;data\u0026#34; : { \u0026#34;timestamp\u0026#34;: 1235, \u0026#34;artifacts\u0026#34; : [{ \u0026#34;name\u0026#34; :\u0026#34;activestate/A\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;BUILT\u0026#34;, \u0026#34;revision\u0026#34;: 0, \u0026#34;version\u0026#34;: 0, \u0026#34;urls\u0026#34;: [\u0026#34;http://activestate.com/storage/AAA-83838-03030-83838-activestate-A/hello.txt\u0026#34;] }, { \u0026#34;name\u0026#34; :\u0026#34;activestate/B\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;BUILT\u0026#34;, \u0026#34;revision\u0026#34;: 0, \u0026#34;version\u0026#34;: 0, \u0026#34;urls\u0026#34;: [\u0026#34;http://activestate.com/storage/BBB-83838-03030-83838-activestate-B/some-other-file.zip\u0026#34;] } ] } } Updating an Ingredient You update an ingredient the same way you add them\nRequest\nmutation Ingredient ( name : \u0026#34;activestate/A\u0026#34; src : \u0026#34;data:,Hi%2C%20Mom!\u0026#34; builder : activestate/builders/concat.sh@123 args: [ \u0026#34;hello.txt\u0026#34; ] ){ id revision timestamp } Response\n{ \u0026#34;data\u0026#34; : { \u0026#34;id\u0026#34;: \u0026#34;CCC-8929038-0030-83838\u0026#34;, \u0026#34;revision\u0026#34;: 1, \u0026#34;timestamp\u0026#34;: 2009 } } We changed the source URL which produces a new revision of the Ingredient we added previously in addition the id was updated. If we ask for the artifacts of A now with a newer timestamp.\nRequest\nquery { timestamp artifacts(attime=2009, platform=macos requirments=[\u0026#34;activestate/A\u0026#34;]){ name status revision urls } } Response\n{ \u0026#34;data\u0026#34; : { \u0026#34;timestamp\u0026#34;: 2009, \u0026#34;artifacts\u0026#34; : [{ \u0026#34;name\u0026#34;: \u0026#34;activestate/A\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;BUILT\u0026#34;, \u0026#34;revision\u0026#34;: 1, \u0026#34;urls\u0026#34;: [\u0026#34;http://activestate.com/storage/CBIC-1234-838-8323-activestate-A/hello.txt\u0026#34;] } ] } } We receive an artifact whith a different content addresable hash\nIn fact, because \u0026lsquo;B\u0026rsquo; depends on \u0026lsquo;A\u0026rsquo; it to will have a different artifact (assuming you use the later timestamp).\nRequest\nquery { timestamp artifacts(attime=2009, platform=macos requirments=[\u0026#34;activestate/B\u0026#34;]){ name status revision urls } } Response\n{ \u0026#34;data\u0026#34; : { \u0026#34;timestamp\u0026#34;: 2009, \u0026#34;artifacts\u0026#34; : [{ \u0026#34;name\u0026#34;: \u0026#34;activestate/B\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;BUILT\u0026#34;, \u0026#34;revision\u0026#34;: 0, \u0026#34;urls\u0026#34;: [\u0026#34;http://activestate.com/storage/ZIRE-20937-0ee0-83838-activestate-B/some-other-file.zip\u0026#34;] } ] } } What if we made a huge mistake and want to revert?\nRequest\nmutation Ingredient ( name : \u0026#34;activestate/A\u0026#34; src : \u0026#34;data:,Hello%2C%20World!\u0026#34; builder : activestate/builders/concat.sh@123 args: [ \u0026#34;hello.txt\u0026#34; ] ){ id revision timestamp } Response\n{ \u0026#34;data\u0026#34; : { \u0026#34;id\u0026#34;: \u0026#34;AAA-83838-03030-83838\u0026#34;, \u0026#34;revision\u0026#34;: 3, \u0026#34;timestamp\u0026#34;: 2012 } } **NOTE: wonder why we even bother with a revision number **\nAs before the revision number incremented. But something curious happens when asking for the artifacts.\nRequest\nquery { timestamp artifacts(attime=2012, platform=macos requirments=[\u0026#34;activestate/A\u0026#34;]){ name status revision urls } } Response\n{ \u0026#34;data\u0026#34; : { \u0026#34;timestamp\u0026#34;: 2012, \u0026#34;artifacts\u0026#34; : [{ \u0026#34;name\u0026#34;: \u0026#34;activestate/A\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;BUILT\u0026#34;, \u0026#34;revision\u0026#34;: 3, \u0026#34;version\u0026#34;: 0, \u0026#34;urls\u0026#34;: [\u0026#34;http://activestate.com/storage/AAA-83838-03030-83838-activestate-A/hello.txt\u0026#34;] } ] } } You\u0026rsquo;ll note that the URL is the same for revision 0 of activestate/A. That\u0026rsquo;s because the system detected we\u0026rsquo;re using the same inputs and the same builder therefore determined it could safely reuse the old output.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/fork/",
	"title": "fork",
	"tags": [],
	"description": "",
	"content": "Create a fork of an existing Platform project.\nA fork is a copy of a project that you can edit.\nSyntax state fork --name \u0026lt;project_name\u0026gt; --org \u0026lt;owner\u0026gt; ActiveState-Recipes/Core [--private] The \u0026ldquo;owner\u0026rdquo; argument is your username or the organization name for your copy of the forked project. If you do not specify the --org flag, you will be prompted to select the owner, from the orgs you belong to, interactively at the command prompt.\nThe \u0026ldquo;project\u0026rdquo; argument is the name of the project for your copy of the forked project. If you don\u0026rsquo;t specify the --name flag, the name of the forked project is used.\nIf you belong to a organization on a paid tier, you can use the --private flag to fork the project as a private project.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/projects/forks/",
	"title": "Forking projects",
	"tags": [],
	"description": "",
	"content": "Forking a project allows you to copy an edit a project, and share that project and the builds it contains between organizations you belong to. For example, you can create a project in your personal organization and test to ensure that it is exactly what you need, and then fork it to an organization you belong to and share it with all of the members of that organization.\nTo fork a project:\n Open your web browser and navigate to http://platform.activestate.comand sign in. In Your Dashboard, select the organization that contains the project you want to fork and then click the Projects tab, or click the Projects tab in your dashboard to fork a personal project. Select the project to fork from your Custom Projects list or the Managed Projects list, if available. Custom projects are projects specific to your organization that you can modify as needed. Managed projects are created and maintained by ActiveState. Click Fork It next to the project title. Note: Forking a project always creates the fork from the most recent commit for the project. Enter a name for the forked project. You can leave it the same as the original project or provide a custom name to indicate that it is forked. Select the organization to fork the project to. You can select any organization you belong to or your personal organization. Click Fork Project.  The project is forked and you are redirected to the new forked project page. You can tell that you are in the forked project because a Forked from project name message is displayed under the project name.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/state/ci/github-actions/",
	"title": "GitHub Actions",
	"tags": [],
	"description": "",
	"content": "The following sections describe the tasks you need to complete to set up a CI/CD process for a Python project with GitHub, GitHub Actions, and the ActiveState Platform.\nGathering environment variable settings Before you begin:\n You need an ActiveState Platform account. If you do not currently have an account you can sign up for free at: https://platform.activestate.com/create-account. You need to have the State Tool installed on your computer, and authorized with the Platform using the state auth command, in order to run the command to retrieve the API key, and to access your private.key file if you are using secrets.  The State Tool will use the following environment variables if they are defined:\n ACTIVESTATE_API_KEY: This API key is used to authenticate the State Tool with the ActiveState Platform, as required, to download language projects, update packages, etc. If you use ActiveState Platform secrets in your build process or scripts run by the build process, you must also configure the ACTIVESTATE_PRIVATE_KEY. ACTIVESTATE_PRIVATE_KEY: Optional. The private key to use for decrypting secrets.  Obtaining your API Key Currently, you can only generate an API Key by calling our API directly using a curl command. Open your command prompt, and copy and paste or enter the following command:\ncurl -X POST \u0026#34;https://platform.activestate.com/api/v1/apikeys\u0026#34; \\ -H \u0026#34;accept: application/json\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34; \\ -H \u0026#34;Authorization: Bearer `state export jwt`\u0026#34; \\ -d \u0026#34;{ \\\u0026#34;name\\\u0026#34;: \\\u0026#34;APIKeyForCI\\\u0026#34;}\u0026#34; Example response:\n{ \u0026#34;name\u0026#34;: \u0026#34;APIKeyForCI\u0026#34;, \u0026#34;token\u0026#34;: \u0026#34;MjZlMGI5YzQtYzFkMS00MmUxLTllYjAtODRjMjA5YzVjZTNmXlFhQ3llUW9WeGlzaTUxNzku\u0026#34;, \u0026#34;tokenID\u0026#34;: \u0026#34;26e0b9c4-c1d1-42e1-9eb0-84c209c5ce3f\u0026#34; } In this example, you would copy the token value to use as the ACTIVESTATE_API_KEY environment variable in your CI/CD application: MjZlMGI5YzQtYzFkMS00MmUxLTllYjAtODRjMjA5YzVjZTNmXlFhQ3llUW9WeGlzaTUxNzku\nObtaining your Private Key You can find the private key value at \u0026lt;configdir\u0026gt;/activestate/cli-unstable/private.key.\nThe configdir varies per platform, but in most cases will be at one of:\n Windows: %HOME%\\AppData\\Roaming\\activestate\\cli-unstable\\ Linux: ~/config/activestate/cli-unstable/ macOS: ~/Library/Application\\ Support/activestate/cli-unstable/  The private key environment variable expects the contents of the private.key file, not the filepath.\nGitHub setup  Sign in to GitHub and navigate to the repository where you want to add the GitHub Action. Click Settings. Click Secrets and then click Add a new secret. In the Secrets page, click Add a new secret enter the name and value for each environment variable and click Add secret. For information on the required values, see Generating an API key and, if applicable, Configuring your private key. IMPORTANT: The ACTIVESTATE_API_KEY is used to authenticate the State Tool automatically whenever required by the CI/CD build steps.  If you\u0026rsquo;re adding the ACTIVESTATE_PRIVATE_KEY environment variable, you need to open the private.key file and copy the contents.\n-----BEGIN RSA PRIVATE KEY----- ... 3W5OE+S83fcBz1u7pNzgE4UtXJOADW0PtGt7dLnxqxWJbg38mKYMmqwDoD3/HkfH ... -----END RSA PRIVATE KEY----- ActiveState Platform project setup You can use either the Dashboard or the State Tool to create a new project and add the language, platforms, and packages your project requires. Set up your project by:\n Creating a new custom project Copying and editing (forking) an ActiveState project Use the state init and state packages commands to create a new project and add the language, platforms (operating systems), and package requirements your code project needs.  Configure activestate.yaml After you create an ActiveState project, complete the following steps to activate your project and add the configuration file to your code repository, so that the CI/CD has access to it.\n Open your command prompt and navigate to the top level folder where you want to create your ActiveState Platform project. Enter state activate \u0026lt;owner/project_name\u0026gt;. For example: state activate acmetech/python-3-6-6. Copy the activestate.yaml configuration file to the root directory of your code repository. Edit the activestate.yaml to add any scripts, variables, or secrets you want CI/CD to run or have access to. For more information on these options, see Getting started. Add activestate.yaml to the repository and check in your changes.  GitHub Action setup   Click the Actions tab.\n  Click Set up a workflow yourself.\n  Replace the default script with State Tool specific configuration settings. The following example demonstrates how to install the State Tool on both Linux and Windows, and how to run scripts for linting the code and for tests using the State Tool.\n# This is a basic workflow to help you get started with GitHub CI using ActivePython name: ActivePython application on GitHub CI # Setting up Cache directory and ActiveState Platform API key env: ACTIVESTATE_CLI_CACHEDIR: ${{ github.workspace }}/.cache ACTIVESTATE_API_KEY: ${{ secrets.ACTIVESTATE_API_KEY }} # Controls when the action will run. Triggers the workflow on push events on the default branch on: [push] # A CI workflow is made up of one or more jobs that can run sequentially or in parallel jobs: # This workflow contains a single job called \u0026#34;build\u0026#34; build: # The type of runner that the job will run on (this one is a matrix build) runs-on: ${{ matrix.os }} strategy: matrix: # Building on both Windows and Linux(Ubuntu) simultaneously os: [windows-latest, ubuntu-latest] steps: # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - uses: actions/checkout@v2 # Installing State Tool on Windows via Powershell - name: Install State Tool (Windows) if: matrix.os == \u0026#39;windows-latest\u0026#39; run: | (New-Object Net.WebClient).DownloadFile(\u0026#39;https://platform.activestate.com/dl/cli/install.ps1\u0026#39;, \u0026#39;install.ps1\u0026#39;); Invoke-Expression -Command \u0026#34;$Env:GITHUB_WORKSPACE\\install.ps1 -n -t $Env:GITHUB_WORKSPACE\u0026#34; echo \u0026#34;::add-path::$Env:GITHUB_WORKSPACE\u0026#34; # Installing State Tool on Linux with default shell behavior - name: Install State Tool (Linux) if: matrix.os != \u0026#39;windows-latest\u0026#39; run: sh \u0026lt;(curl -q https://platform.activestate.com/dl/cli/install.sh) -n # Checking ActiveState Platform for project updates - name: Update project run: state pull # Caching downloaded build using GitHub CI cache - name: Cache state tool cache uses: actions/cache@v1 env: cache-name: cache-platform-build with: path: ${{ env.ACTIVESTATE_CLI_CACHEDIR }} key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles(\u0026#39;activestate.yaml\u0026#39;) }} restore-keys: | ${{ runner.os }}-build-${{ env.cache-name }} # Execute linting of the project on ActivePython - name: Lint with flake8 run: state run lints # Running project tests using pytest on ActivePython - name: Test with pytest run: state run tests This setup should work for most Python projects with slight modifications. The YAML elements that could be tweaked include:\n Update the name setting on line 2 to match your application Update the on setting on line 10 to modify the triggers running the build (including setting the branch) Update the operating systems in the matrix section based on your target OS(es) Replace the last two steps (lint and test) to match the specific script(s) to run for your project. The scripts you add must reference scripts defined in your activestate.yaml file.    Click Start a Commit and commit the Action configuration file to your repository. Each time you push changes to your code repository the CI/CD process install and launch the State Tool activated environment and run the scripts you have specified.\n  You can view details for each time the workflow runs in GitHub by clicking the Actions tab, selecting the workflow, and then choosing clicking the title of the event to view. The logs for that event are then displayed.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/history/",
	"title": "history",
	"tags": [],
	"description": "",
	"content": "List the commit history for your project.\nIt is limited to the past 10 commits.\nThis is the same as the information displayed in the Project History list in the History tab for your project on the ActiveState Platform.\nUsage To view history for the current project:\nstate history To view history for a specified project by \u0026lt;owner\u0026gt;/\u0026lt;projectname\u0026gt;:\nstate history --namespace ActiveState/ActivePython-3.6.6 Example The following information is displayed in the output for each commit.\ncommit e3a9e215-ed72-4de5-9271-73870a33d08a Author: jsmith Date: 12 Mar 2020 18:27 Description: Added language: python 2.7.17 python 2.7.17 added "
},
{
	"uri": "https://activestate.github.io/documentation-public/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "Welcome to the documentation site for the ActiveState Platform.\nThe ActiveState Platform is ActiveState\u0026rsquo;s open source languages platform.\n Change Log Terms of Use and Service Agreement  Getting Started These are some resources for getting started with the ActiveState Platform:\n Platform quick start State Tool quick start Working with projects Managing your organization  "
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/init/",
	"title": "init",
	"tags": [],
	"description": "",
	"content": "Create a new ActiveState Platform project.\nOnce the project is created locally, use the push command to push your local changes to the ActiveState Platform so that you project is available in the Dashboard and to enable all project features, such as secrets.\nUsage state init \u0026lt;owner\u0026gt;/\u0026lt;project_name\u0026gt; \u0026lt;Language[@version]\u0026gt; [--path \u0026lt;path\u0026gt;] The \u0026ldquo;owner\u0026rdquo; argument is your username or the organization name that the project belongs to.\nUse the Language argument to specify the language distribution the project should use. You must specify one of the following:\n perl python3 python2  You can also optionally specify the version to use by appending @version to the language with the specific version number you want to use. If you don\u0026rsquo;t specify a version, the latest available version for that language will be used.\nUse the --path flag to specify the local directory where the project will be created.\nExample You can use the state init command followed by the state push command to create a new project on the ActiveState Platform.\nstate init jsmith/johnspython3.6 python3@3.6.6 --path C:\\state_projects\\mypython cd C:\\state_projects\\mypython state push Related Information push Command\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/state/ci/jenkins/",
	"title": "Jenkins",
	"tags": [],
	"description": "",
	"content": "The following sections describe the tasks you need to complete to set up a CI/CD process with Jenkins, your version control system (VCS), and the ActiveState Platform. You need the appropriate access to these systems to complete the setup. In the examples below, we show configuration steps for GitHub specifically. You may need to adjust some of the tasks if you are using a different VCS.\nGathering environment variable settings Before you begin:\n You need an ActiveState Platform account. If you do not currently have an account you can sign up for free at: https://platform.activestate.com/create-account. You need to have the State Tool installed on your computer, and authorized with the Platform using the state auth command, in order to run the command to retrieve the API key, and to access your private.key file if you are using secrets.  The State Tool will use the following environment variables if they are defined:\n ACTIVESTATE_API_KEY: This API key is used to authenticate the State Tool with the ActiveState Platform, as required, to download language projects, update packages, etc. If you use ActiveState Platform secrets in your build process or scripts run by the build process, you must also configure the ACTIVESTATE_PRIVATE_KEY. ACTIVESTATE_PRIVATE_KEY: Optional. The private key to use for decrypting secrets.  Obtaining your API Key Currently, you can only generate an API Key by calling our API directly using a curl command. Open your command prompt, and copy and paste or enter the following command:\ncurl -X POST \u0026#34;https://platform.activestate.com/api/v1/apikeys\u0026#34; \\ -H \u0026#34;accept: application/json\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34; \\ -H \u0026#34;Authorization: Bearer `state export jwt`\u0026#34; \\ -d \u0026#34;{ \\\u0026#34;name\\\u0026#34;: \\\u0026#34;APIKeyForCI\\\u0026#34;}\u0026#34; Example response:\n{ \u0026#34;name\u0026#34;: \u0026#34;APIKeyForCI\u0026#34;, \u0026#34;token\u0026#34;: \u0026#34;MjZlMGI5YzQtYzFkMS00MmUxLTllYjAtODRjMjA5YzVjZTNmXlFhQ3llUW9WeGlzaTUxNzku\u0026#34;, \u0026#34;tokenID\u0026#34;: \u0026#34;26e0b9c4-c1d1-42e1-9eb0-84c209c5ce3f\u0026#34; } In this example, you would copy the token value to use as the ACTIVESTATE_API_KEY environment variable in your CI/CD application: MjZlMGI5YzQtYzFkMS00MmUxLTllYjAtODRjMjA5YzVjZTNmXlFhQ3llUW9WeGlzaTUxNzku\nObtaining your Private Key You can find the private key value at \u0026lt;configdir\u0026gt;/activestate/cli-unstable/private.key.\nThe configdir varies per platform, but in most cases will be at one of:\n Windows: %HOME%\\AppData\\Roaming\\activestate\\cli-unstable\\ Linux: ~/config/activestate/cli-unstable/ macOS: ~/Library/Application\\ Support/activestate/cli-unstable/  The private key environment variable expects the contents of the private.key file, not the filepath.\nJenkins setup   Navigate to the web console for your Jenkins instance.\n  Click New Item, enter a name for your new item, and then choose New Pipeline and click OK.\n  In the Build Triggers section, choose GitHub hook trigger for GITScm polling. This setting combined with the Webhook setup task will cause a new build to run each time changes are pushed to the code repository.\n  In the Pipeline section, select Pipeline script from SCM as the Definition.\n  Select Git or Subversion as your version control system and enter the URL for your repository.\n  Click Add \u0026gt; Jenkins to add your ACTIVESTATE_API_KEY and enter the following settings:\n Kind: Secret text Secret: The API key generated in Obtaining your API key. ID: ACTIVESTATE_API_KEY    If you want to use secrets, click Add \u0026gt; Jenkins to add your ACTIVESTATE_PRIVATE_KEY and enter the following settings:\n Kind: Secret text Secret: The contents of your private.key file from Obtaining your private key ID: ACTIVESTATE_PRIVATE_KEY    In some cases you may need to escape certain characters in your private key.\n You need to open the private.key file and copy the contents.\n-----BEGIN RSA PRIVATE KEY----- ... 3W5OE+S83fcBz1u7pNzgE4UtXJOADW0PtGt7dLnxqxWJbg38mKYMmqwDoD3/HkfH ... -----END RSA PRIVATE KEY----- If you are setting up a private repository, you will need to configure access for the repository for Jenkins.  ActiveState Platform project setup You can use either the Dashboard or the State Tool to create a new project and add the language, platforms, and packages your project requires. Set up your project by:\n Creating a new custom project Copying and editing (forking) an ActiveState project Use the state init and state packages commands to create a new project and add the language, platforms (operating systems), and package requirements your code project needs.  Configure activestate.yaml After you create an ActiveState project, complete the following steps to activate your project and add the configuration file to your code repository, so that the CI/CD has access to it.\n Open your command prompt and navigate to the top level folder where you want to create your ActiveState Platform project. Enter state activate \u0026lt;owner/project_name\u0026gt;. For example: state activate acmetech/python-3-6-6. Copy the activestate.yaml configuration file to the root directory of your code repository. Edit the activestate.yaml to add any scripts, variables, or secrets you want CI/CD to run or have access to. For more information on these options, see Getting started. Add activestate.yaml to the repository and check in your changes.  Add a Jenkinsfile You need to add a Jenkinsfile to the root of your code repository that includes all of the steps required to build, test, and deploy your code. The example provided demonstrates the State Tool-specific steps for installing the State Tool and running scripts that are defined in the activestate.yaml file for the project.\npipeline { agent any environment { // Bash is one of the state tool\u0026#39;s supported shells. Jenkins defaults // to sh so we have to set it explicitly here SHELL=\u0026#34;/bin/bash\u0026#34; // Since jobs run as the user \u0026#39;jenkins\u0026#39; we do not have permission // to install the state tool anywhere on the current PATH. We // instead update the path here to a known location that we // will install to PATH=\u0026#34;$WORKSPACE:$PATH\u0026#34; ACTIVESTATE_API_KEY = credentials(\u0026#39;ACTIVESTATE_API_KEY\u0026#39;) } stages { stage (\u0026#39;Environment\u0026#39;) { steps { sh \u0026#39;env\u0026#39; } } stage (\u0026#39;Install state tool\u0026#39;) { steps { sh\u0026#39;\u0026#39;\u0026#39; curl -q https://platform.activestate.com/dl/cli/install.sh -o install.sh chmod +x install.sh ./install.sh -n -t $WORKSPACE || true \u0026#39;\u0026#39;\u0026#39; } } stage (\u0026#39;Print location of Python interpreter\u0026#39;) { steps { sh \u0026#39;state run which-python\u0026#39; } } stage (\u0026#39;Active private project and run script\u0026#39;) { steps { sh \u0026#39;state run clean\u0026#39; } } stage (\u0026#39;Cleanup\u0026#39;) { steps { sh \u0026#39;rm -rf ~/.cache/activestate\u0026#39; sh \u0026#39;rm install.sh\u0026#39; sh \u0026#39;rm -rf state\u0026#39; } } } } The scripts being executed in the Jenkinsfile are defined in the scripts section of the activestate.yaml file for the project:\nscripts: - name: clean description: Run the data cleaner script value: python3 cleaner.py - name: which-python description: Determine which python interpreter is being used language: python3 value: | import sys print(\u0026#34;Python script running with: \u0026#34;, sys.executable) Webhook setup If you want Jenkins to create a new build each time code changes are checked in to your repository, you need to set up a webhook in the GitHub settings for your repository. The webhook posts a message to Jenkins each time changes are pushed to the repository with the information required for Jenkins to start the associated build.\n Open your web browser and navigate to your repository on github.com. Click Settings. Click Web Hooks, and then click Add Webhook. In Payload URL, enter the URL for your Jenkins instance with the path /github-webhook/. For example: https://jenkins.acme-tech.com/github-webhook/  If your Jenkins pipeline is configured correctly, you will see a job start and complete successfully each time someone pushes new code changes to the repository.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/languages/",
	"title": "languages",
	"tags": [],
	"description": "",
	"content": "List the languages in your project, and allows you to update the specified languages.\nIn order to build your project successfully, only one language can be specified.\n Usage To list the languages in your project:\nstate languages To update a language:\nstate languages update \u0026lt;Language[@version]\u0026gt; Use the Language argument to specify the language distribution the project should use. You must specify one of the following:\n perl python  You can also optionally specify the version to use by appending @version to the language with the specific version number you want to use. If you don\u0026rsquo;t specify a version, the latest available version for that language will be used.\nExamples: A project using Python 3.6.6 can be updated to version 3.8.1 using the following command.\nstate languages update python@3.8.1 You could alternatively specify a Python 2 version:\nstate languages update python@2.7.14 If you want to use the latest version available, omit the version:\nstate languages update python  If you want the latest Python 2 version available, you need to specify the latest version using the Language@version syntax.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/organizations/leaving/",
	"title": "Leaving Organizations",
	"tags": [],
	"description": "",
	"content": "You can leave any organization you are a member of. If you are the owner of an Organization, you can leave the organization if you are not the user that created the organization.\n Click menu at the top right of the page that displays your username, and select Account Settings. Click the Organizations link. Click Leave next to the organization you want to leave. Click Yes to confirm your selection.  "
},
{
	"uri": "https://activestate.github.io/documentation-public/support/",
	"title": "Need Help?",
	"tags": [],
	"description": "",
	"content": "Documentation Get help with the ActiveState platform by clicking your username in the top-right menu and selecting Documentation. Help for the ActiveState Platform will open in a new browser tab or window.\nYou can also access the latest documentation directly at http://docs.activestate.com/platform/.\nContact support Via messaging If you run into an issue or have a question while you are navigating the ActiveState website, you can open a chat window and send a message by clicking on the messenger at the bottom right of each page. You can attach screenshots and other files, if necessary.\nBy email Contact ActiveState technical support if you run into issues while using the ActiveState Platform at support@activestate.com.\nSupported browsers The ActiveState Platform supports the most recent versions of Chrome, Firefox, Safari, Microsoft Edge, and Internet Explorer 11.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/user/prefs/organizations/",
	"title": "Organizations",
	"tags": [],
	"description": "",
	"content": "You can add new Organizations or leave Organizations you are a member of in the Organizations account settings page.\nCreating organizations To create a new Organization:\n  Click menu at the top right of the page that displays your username, and select Account Settings.\n  Click the Organizations link.\n  Enter the Organization Name to display in the ActiveState Platform.\n  Accept the suggested URL, or specify a shorter, easier to remember URL.\n  Click Create Organization.\nWhen you create an organization, you are automatically assigned ownership of the Organization, which allows you to invite and manage users for the Organization.\n  The next step after creating a new Organization is to invite users. For more information, see Sending invites.\n  Leaving organizations To leave an Organization:\n Click menu at the top right of the page that displays your username, and select Account Settings. Click the Organizations link. Click Leave next to the organization you want to leave. Click Yes to confirm your selection.  Related Information  Managing Organizations "
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/organizations/",
	"title": "organizations",
	"tags": [],
	"description": "",
	"content": "Lists the organizations you are a member of.\nThe Organization name for each Organization you belong to is listed.\nUsage state organizations "
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/packages/",
	"title": "packages",
	"tags": [],
	"description": "",
	"content": "Manage the packages within an ActiveState Platform project.\nUsage state packages state packages add \u0026lt;name[@version]\u0026gt; state packages import --file \u0026lt;filename\u0026gt; state packages update \u0026lt;name[@version]\u0026gt; state packages remove \u0026lt;name\u0026gt; state packages search \u0026lt;name\u0026gt; state packages List the packages and versions currently included in your project.\n------------- ------------ Name Version ------------- ------------ numpy pluggy 0.12.0 pytest 4.3.0 requests 2.21.0 ------------- ------------ In the example output, specific versions have been specified for pluggy, pytest, and requests. No version was specified for numpy, so the latest version available on the Platform will be used each time the project is built.\nIf you want to view the packages and versions for a particular commit, an earlier saved version of your project, you can specify the --commit flag. Currently, the commit IDs for a project are only available in the History tab for the Project in the Dashboard.\nFor example:\nstate packages list --commit 17167a9b-40f0-4bdf-b3ec-b2755badeb50\nstate packages add Add a specific package to your project by name. You can optionally specify a specific version to use.\nExamples:\nstate packages add requests state packages add requests@2.21.0 If you do not specify the package version, the latest version available on the ActiveState Platform will be used each time a new build is created. Specifying the version \u0026ldquo;pins\u0026rdquo; the package to that version until you change it on the Platform or using the state packages update subcommand.\nstate packages import Add a set of packages to you project by specifying a requirements.txt file.\nExample: state packages import --file requirements.txt\nstate packages remove Remove a specific package from your project by name.\nExample: state packages remove requests\nstate packages search Search for available packages by name or partial string.\nExample: state packages search requests\nstate packages update Update a package in your project by name. By default the package is updated to the latest available version, but you can optionally specify a specific version to use.\nExamples:\nstate packages update requests state packages update requests@2.21.0 "
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/devug/04-packaging/",
	"title": "Packaging",
	"tags": [],
	"description": "",
	"content": "We provide several Packagers that will take Artifacts out of the Build Graph and convert them to a format that you can use natively. Packagers have an number of common required arguments and fields in common. These describe the Artifacts that the packager needs.\nCommon query { ; packager using atTime/requirements packager(atTime=1234, platform=\u0026#34;II-X\u0026#34;) { fields... } ; packager referencing an order packager(commitId = \u0026#34;AA7-IXX...\u0026#34;) { fields... } } Common arguments In addition to packager specific arguments all packagers require one of more of the following attributes.\n   Argument Descrption     atTime Mandatory, only changes to graph at or before this time will be considered   requirements List of requirements and constraints. Either requirements can be specified or orderId but not both.   order A Url to an order which contains the timestamp and requirements. Either an order can be specified or you must use requirements and atTime but not both.   platform Id of a platform which represents an operating system, hardware architecture    Common Fields    Field Descrption     atTime Timestamp needed to reproduce this package exactly   requirements List of requirements and constraints. Either requirements can be specified or orderId but not both   order A Url to an order which contains the timestamp and requirements. Either an order can be specified or you must use requirements and atTime but not both.    Artifacts You\u0026rsquo;ve already been introduced to the fundamental packager query artifacts it can retrive the artifacts from one or more ingredients start building them if they haven\u0026rsquo;t been built otherwise returning the results.\nquery { artifacts(atTime=1234, platform=\u0026#34;II-X\u0026#34;, requirment=[\u0026#34;namespace/feature\u0026#34;]) { urls } } Docker Is a packager that will take an artifact from the Build Graph and package it\u0026rsquo;s content into a docker image that can be deployed to a repository somewhere.\nquery { docker(atTime=1234, platform=\u0026#34;II-X\u0026#34;, requirment=[\u0026#34;namespace/feature\u0026#34;]) { urls } } Legacy Installer You\u0026rsquo;ve already been introduced to the fundamental packager query artifacts it can retrive the artifacts from one or more ingredients start building them if they haven\u0026rsquo;t been built otherwise returning the results.\nquery { installer(atTime=1234, platform=\u0026#34;II-X\u0026#34;, requirment=[\u0026#34;namespace/feature\u0026#34;]) { urls } } Python Wheels This will package all python requirments into a list of wheels. Note it is an error to specify requirements that are not Python. We\u0026rsquo;ll have to figure out how to distinguish system libraries from python packages. Will we do this by namespace? Or do we let you build anything and ship you the wheel we find?\nquery { wheels(atTime=1234, platform=\u0026#34;II-X\u0026#34;, requirement=[\u0026#34;namespace/feature\u0026#34;]) { urls } } "
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/platforms/",
	"title": "platforms",
	"tags": [],
	"description": "",
	"content": "List the platforms in your project, and allows you to add and remove platforms, and search for available platforms on the ActiveState Platform.\nUsage To list the platforms in your project:\nstate platforms Search all of the platforms available on the ActiveState Platform:\nstate platforms search The output lists the Name (Windows, Linux, etc.), Version, and Bit Width for each Platform. Bit Width indicates whether the platform supports the 32-bit or 64-bit version of an operating system.\nTo add a platform:\nstate platforms add [--bit-width 32|64] \u0026lt;platform\u0026gt; \u0026lt;version\u0026gt; To remove a platform:\nstate platforms remove [--bit-width 32|64] \u0026lt;platform\u0026gt; \u0026lt;version\u0026gt; Examples The output of state platforms is a list of configured platforms. Bit Width indicates whether the platform supports the 32-bit or 64-bit version of an operating system.\nPlatforms: Name Version Bit Width ------------ ----------------- -------------- Windows 10.0.17134.1 64 Add a Windows 10 platform:\nstate platforms add Windows 10.0.14393 Remove a Linux platform\nstate platforms remove Linux "
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/projects/",
	"title": "projects",
	"tags": [],
	"description": "",
	"content": "List the projects you have access to from all of the Organizations you belong to.\nThe information listed for each project includes Project name, Organization name, and a project description (if available).\nUsage state projects "
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/pull/",
	"title": "pull",
	"tags": [],
	"description": "",
	"content": "Update your activestate.yaml so that it references the latest version of your platform runtime environment.\nWhen you update the packages in your project on the Platform and successfully created a new build, you need to run the pull command to make the updated build available in your local environment.\nWhen you state activate your project, and there is a newer commit available, you will be notified that you need to run the pull command to get the up-to-date version of your Platform project.\nUsage state pull "
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/push/",
	"title": "push",
	"tags": [],
	"description": "",
	"content": "Push your local changes to the ActiveState Platform.\nFor example, you can use the init command to create a new project locally using the State Tool, and then push this change to the Platform so it shows up in your account, and is accessible in the Dashboard.\nUsage state push "
},
{
	"uri": "https://activestate.github.io/documentation-public/organizations/users/",
	"title": "Removing Users",
	"tags": [],
	"description": "",
	"content": "If you are an Owner of an organization, you can remove users that belong to that organization. Once removed, the user\u0026rsquo;s access to all data associated with the organization will be immediately revoked.\nIf you want to remove yourself from the Organization, ensure that the Organization has at least one owner and navigate to the Organizations Account Settings page to leave the Organization.\n  Click Your Dashboard at the top of any page. Click the name of the organization you want to remove users from in the Your Organizations list. Click the Members tab. Click Remove next to the user\u0026rsquo;s name to remove them from the organization.  "
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/devug/02-requirements/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": "interface Requirement{ name: String! } type Any implements Requirement {name: String!} type Latest implements Requirement {name: String!} type GT implements Requirement{ name: String! version: String! } type GTE implements Requirement{ name: String! version: String! } type LT implements Requirement{ name: String! version: String! } type LTE implements Requirement{ name: String! version: String! } "
},
{
	"uri": "https://activestate.github.io/documentation-public/user/password_reset/",
	"title": "Resetting your password",
	"tags": [],
	"description": "",
	"content": "If you cannot remember your password or you need to reset it for security reasons, you can reset it.\nIf you are signed into the Platform and want to change your password, you can do so in the Change Password preferences page.\n To reset your password:\n Open your browser and navigate to https://platform.activestate.com. On the Sign In page, click the Forgot your password?link. Enter the email address associated with your account and click Send Reset Link. Check your email inbox for a message with the subject line: \u0026ldquo;Reset your ActiveState password\u0026rdquo; and click the password reset link. Enter your new password, then enter it again in the Confirm Password text box, and click Reset Password.  "
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/run/",
	"title": "run",
	"tags": [],
	"description": "",
	"content": "Manually run scripts you have defined for your projects by name.\nScript names are case-sensitive.\nUsage state run \u0026lt;script_name\u0026gt; You can also pass arguments to your scripts, the same way you would to any command. Let\u0026rsquo;s say you have a script called \u0026ldquo;hello\u0026rdquo; which takes an argument for who/what it is greeting, you could call it like this:\nstate run hello world Finally, if you are in an activated state (i.e. you\u0026rsquo;ve ran state activate) you don\u0026rsquo;t need to use state run at all, you can run your scripts directly instead. So using the above \u0026ldquo;hello\u0026rdquo; example you could simply run\nhello world Related Information  Scripts scripts Command "
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/scripts/",
	"title": "scripts",
	"tags": [],
	"description": "",
	"content": "List all available scripts.\nRunning it produces a list of script names and descriptions.\nYou can use this output to run the state run command.\nUsage state scripts Related Information  Scripts run Command "
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/secrets/",
	"title": "secrets",
	"tags": [],
	"description": "",
	"content": "Manage secrets within a Project.\nFor more information on secrets, what they represent and how they fit into the wider picture of the State Tool and the Platform check out Getting Started.\nUsage state secrets state secrets set \u0026lt;secret-namespace\u0026gt; \u0026lt;secret-value\u0026gt; state secrets get \u0026lt;secret-namespace\u0026gt; state secrets sync state secrets Lists available secrets for the current project.\nstate secrets set Sets the value for the given secret.\n \u0026lt;secret-namespace\u0026gt; the namespace is in the format of \u0026lt;scope\u0026gt;.\u0026lt;name\u0026gt;, where \u0026lt;scope\u0026gt; is one of user or project and name is the name of the secret. secret-value the value that you want to assign to this secret  state secrets get Retrieves the value for the given secret.\n secret-namespace the namespace is in the format of \u0026lt;scope\u0026gt;.\u0026lt;name\u0026gt;, where \u0026lt;scope\u0026gt; is one of user or project and name is the name of the secret.  state secrets sync This will sync all secret values that you have access to with project members that should also have access to these secrets. This is mainly intended for when new members join a project.\nRelated Information  Secrets "
},
{
	"uri": "https://activestate.github.io/documentation-public/organizations/invite/",
	"title": "Sending Invites",
	"tags": [],
	"description": "",
	"content": "You can invite other users to join your organization. Each user you invite will receive an email with a unique link that allows them to accept your invitation and access the data associated with your organization. If they are not already users of the ActiveState Platform they will need to create an account.\nInvited users are listed in the Pending Invites list until they accept the invite to the organization. You can resend the email, if necessary, by clicking the Resend link.\nYou must be an owner of an organization to invite users.\n  Click Your Dashboard at the top of any page. Click the name of the organization you want to invite users to in the Your Organizations list. Click the Members tab. In the Invite a New Member panel enter the email address of the user to invite. Users are added as members by default. If you want the user to administer the organization select Owner. Owners can invite users, remove users, and switch users between owner and member for the organization. Click Send Invite.  "
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "Display information about the current project, or a specified remote project.\nThe following information is displayed:\n the name of the project the organization the project belongs to all scripts associated with the project all events associated with the project  Usage state show state show \u0026lt;owner/projectName\u0026gt; The \u0026ldquo;owner\u0026rdquo; argument is your username or the organization name that the project belongs to.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/user/sign_in/",
	"title": "Signing In",
	"tags": [],
	"description": "",
	"content": "To sign in to the ActiveState Platform:\n Navigate to platform.activestate.com. In the Sign In page, enter your username or email address and password. Click Sign in. If you have Two-factor authentication enabled, you will be prompted to enter your 6-digit code. Enter your two-factor code and click Sign In again.  If you don\u0026rsquo;t remember your password, you can reset it by clicking the Forgot your password? link on the Sign In page. If you run into any other issues while signing in, contact the support team at support@activestate.com.\n "
},
{
	"uri": "https://activestate.github.io/documentation-public/user/sign_out/",
	"title": "Signing Out",
	"tags": [],
	"description": "",
	"content": "To sign out from the ActiveState Platform:\n Click menu at the top right of the page that displays your username, and select Sign Out.  Your account is signed out, and your browser is redirected to the Sign Inpage.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/style/",
	"title": "Style guide",
	"tags": [],
	"description": "",
	"content": "Admonitions This is a note.\n This is a tip.\n This is an informational message.\n This is a note.\n Diagrams Example 1 graph LR; A[Hard edge] --\u0026gt;|Link text| B(Round edge) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result one] C --\u0026gt;|Two| E[Result two] Example 2 graph LR A --- B B--\u0026gt;C[fa:fa-ban forbidden] B--\u0026gt;D(fa:fa-spinner); Example 3 sequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good! YouTube   "
},
{
	"uri": "https://activestate.github.io/documentation-public/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://activestate.github.io/documentation-public/state/ci/travis/",
	"title": "Travis",
	"tags": [],
	"description": "",
	"content": "The following sections describe the tasks you need to complete to set up a CI/CD process with Travis CI, your version control system (VCS), and the ActiveState Platform. You need the appropriate access to these systems to complete the setup. In the examples below, we show configuration steps for GitHub specifically. You may need to adjust some of the tasks if you are using a different VCS.\nTravis currently provides only limited support for Windows builds, and Windows configuration won\u0026rsquo;t be covered in this guide. We\u0026rsquo;ll add details for this configuration when Windows is fully supported on Travis CI.\n Gathering environment variable settings Before you begin:\n You need an ActiveState Platform account. If you do not currently have an account you can sign up for free at: https://platform.activestate.com/create-account. You need to have the State Tool installed on your computer, and authorized with the Platform using the state auth command, in order to run the command to retrieve the API key, and to access your private.key file if you are using secrets.  The State Tool will use the following environment variables if they are defined:\n ACTIVESTATE_API_KEY: This API key is used to authenticate the State Tool with the ActiveState Platform, as required, to download language projects, update packages, etc. If you use ActiveState Platform secrets in your build process or scripts run by the build process, you must also configure the ACTIVESTATE_PRIVATE_KEY. ACTIVESTATE_PRIVATE_KEY: Optional. The private key to use for decrypting secrets.  Obtaining your API Key Currently, you can only generate an API Key by calling our API directly using a curl command. Open your command prompt, and copy and paste or enter the following command:\ncurl -X POST \u0026#34;https://platform.activestate.com/api/v1/apikeys\u0026#34; \\ -H \u0026#34;accept: application/json\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34; \\ -H \u0026#34;Authorization: Bearer `state export jwt`\u0026#34; \\ -d \u0026#34;{ \\\u0026#34;name\\\u0026#34;: \\\u0026#34;APIKeyForCI\\\u0026#34;}\u0026#34; Example response:\n{ \u0026#34;name\u0026#34;: \u0026#34;APIKeyForCI\u0026#34;, \u0026#34;token\u0026#34;: \u0026#34;MjZlMGI5YzQtYzFkMS00MmUxLTllYjAtODRjMjA5YzVjZTNmXlFhQ3llUW9WeGlzaTUxNzku\u0026#34;, \u0026#34;tokenID\u0026#34;: \u0026#34;26e0b9c4-c1d1-42e1-9eb0-84c209c5ce3f\u0026#34; } In this example, you would copy the token value to use as the ACTIVESTATE_API_KEY environment variable in your CI/CD application: MjZlMGI5YzQtYzFkMS00MmUxLTllYjAtODRjMjA5YzVjZTNmXlFhQ3llUW9WeGlzaTUxNzku\nObtaining your Private Key You can find the private key value at \u0026lt;configdir\u0026gt;/activestate/cli-unstable/private.key.\nThe configdir varies per platform, but in most cases will be at one of:\n Windows: %HOME%\\AppData\\Roaming\\activestate\\cli-unstable\\ Linux: ~/config/activestate/cli-unstable/ macOS: ~/Library/Application\\ Support/activestate/cli-unstable/  The private key environment variable expects the contents of the private.key file, not the filepath.\nTravis setup   Log in to Travis CI at http://travis-ci.org for public or open-source repositories, or their paid option for private repositories at http://travis-ci.com.\n  Enable the repository you want to build.\n Select Settings from the top-right menu. Toggle the switch next to the repository you want to enable. Click Settings next to the repository you want to enable Under Environment Variables, enter the name and value for each API key you want to use and click Add. For information on the required values, see Obtaining your API key and, if applicable, Obtaining your private key.    The ACTIVESTATE_API_KEY is used to authenticate the State Tool automatically whenever required by the CI/CD build steps.\n In some cases you may need to escape certain characters in your private key.\n You need to open the private.key file and copy the contents.\n-----BEGIN RSA PRIVATE KEY----- ... 3W5OE+S83fcBz1u7pNzgE4UtXJOADW0PtGt7dLnxqxWJbg38mKYMmqwDoD3/HkfH ... -----END RSA PRIVATE KEY----- ActiveState Platform project setup You can use either the Dashboard or the State Tool to create a new project and add the language, platforms, and packages your project requires. Set up your project by:\n Creating a new custom project Copying and editing (forking) an ActiveState project Use the state init and state packages commands to create a new project and add the language, platforms (operating systems), and package requirements your code project needs.  Configure activestate.yaml After you create an ActiveState project, complete the following steps to activate your project and add the configuration file to your code repository, so that the CI/CD has access to it.\n Open your command prompt and navigate to the top level folder where you want to create your ActiveState Platform project. Enter state activate \u0026lt;owner/project_name\u0026gt;. For example: state activate acmetech/python-3-6-6. Copy the activestate.yaml configuration file to the root directory of your code repository. Edit the activestate.yaml to add any scripts, variables, or secrets you want CI/CD to run or have access to. For more information on these options, see Getting started. Add activestate.yaml to the repository and check in your changes.  Add a Travis configuration file You need to add a .travis.yml file to the root of your code repository that includes all of the steps required to build, test, and deploy your code. The example provided demonstrates the State Tool-specific steps for installing the State Tool and running scripts that are defined in the activestate.yaml file for the project.\n# Install the State Tool as a dependency. install: - sh \u0026lt;(curl -q https://platform.activestate.com/dl/cli/install.sh) -n before_script: # Run the linter and tests using the State Tool. Scripts named `lints` and `tests` # must be defined in your project\u0026#39;s activestate.yaml file. The ActiveState # Platform language runtime is downloaded and virtual environment is activated # when the first `state run` command is encountered. # In this case, `state run clean` script: - state run clean - state run which-python # Turn email notifications off. notifications: email: false The scripts being executed in the .travis.yml file are defined in the scripts section of the activestate.yaml file for the project:\nscripts: - name: clean description: Run the data cleaner script value: python3 cleaner.py - name: which-python description: Determine which python interpreter is being used language: python3 value: | import sys print(\u0026#34;Python script running with: \u0026#34;, sys.executable) If you successfully configured your Travis CI project, you will see a job start and complete successfully each time someone pushes new code changes to the repository.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/user/prefs/twofactor/",
	"title": "Two-factor Authentication",
	"tags": [],
	"description": "",
	"content": "You can use two-factor authentication to secure your ActiveState Platform account.\nChoosing to use both your password and the two-factor authentication code to access your account secures your account against unauthorized access if your password is compromised.\nBefore you begin: You must have an app on your mobile device to scan the QR code displayed on screen. You can use Google Authenticate (iOS/Android), Authy (iOS/Android), or any similar app that provides the required QR code reading functionality.\nEnabling two-factor authentication To turn on two-factor authentication:\n Click menu at the top right of the page that displays your username, and select Account Settings. Click the Two-factor Authentication link and then click Enable. Open the two-factor authentication app on your mobile device and scan the QR code that is displayed on screen.  Enter your six-digit code in the text box and click Confirm.  If you six-digit code is validated, two-factor authentication is enabled for your account. Two-factor authentication requires that you enter both your password and the current six-digit code displayed in your two-factor authentication app each time you log in.\nDisabling two-factor authentication You can turn off two-factor authentication at any time.\nTo turn off two-factor authentication:\n Log into the Platform using your two-factor authentication code. Click menu at the top right of the page that displays your username, and select Account Settings. Click the Two-factor Authentication link and then click Disable.  You will not be prompted for a two-factor code the next time you log in.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/state/commands/update/",
	"title": "update",
	"tags": [],
	"description": "",
	"content": "Update the State Tool to the latest available version.\nThe update command allows you to download the latest release of the State Tool on demand. By default, the state tool checks for an updated version on a regular basis.\nYou can disable automatic updates by running state update with the --lock flag. If you disable automatic updates you can force an update by manually running state update.\nUsage state update state update --lock state update Checks for a new version and updates the state tool.\nstate update \u0026ndash;lock Turns off automatic updates for individual projects. The version will remain locked at current version for the project when the command runs. The State Tool will still update itself for other projects\nWhen automatic updates are turned off you can still manually update by running the state update command.\n"
},
{
	"uri": "https://activestate.github.io/documentation-public/organizations/billing/",
	"title": "Updating Billing Details",
	"tags": [],
	"description": "",
	"content": " Click Your Dashboard at the top of any page. Click the name of the organization you want to update billing details for. Click the Settings tab. Click Modify. You can add or update billing information including the cardholder name, billing address, contact email, and credit card details. To update or change your credit card information, click Update Card and reenter your credit card number, expiry date, and the CVC number on the back of your card. Click Save to save any changes to your billing information.  "
},
{
	"uri": "https://activestate.github.io/documentation-public/contributions/devug/03-versions/",
	"title": "Versions",
	"tags": [],
	"description": "",
	"content": "In previous examples we showed you how to add simple ingredients to the BuildGraph without any kind of lineage. Every edit we posted was a Revision to the single Ingredient. The revision you are given when asking for Artifacts depends entirely on the time stamp given. Software authors however often ship source for multiple versions of the same software. The BuildGraph models this as well and gives you powerful tools to choose the most appropriate version for your requirments.\nWhen specified correctly, you can later Query the BuildGraph with new time stamps and ask for Artifacts which will be rebuilt (or given cached copies) with updates so long as they satisfy all your constraints.\nTo see this in action will continue from our examples in the previous chapter but first introduce you to the solve() query.\nAsking for the build plan You\u0026rsquo;ve seen the artifacts() query which will retrieve the results of building an ingredient. Another query you should be aware of is the solve() query which uses the same arguments of artifacts() to return a build plan (we call this a Recipe) of your ingredient along with all of it\u0026rsquo;s Transitive Depedencies (Your ingredient\u0026rsquo;s dependencies, your dependencies dependencies and so on). When you use the artifacts() it internally uses the solve() command to determine everything that needs to be built in order to return the artifacts that you\u0026rsquo;ve requested.\nOne interesting thing to understand about requirements, you are not actually specifying ingredients directly by name. Instead you are providing a series of constraints to the Solver whose job it is to find you the best Ingredients that match your requirements for a particular point in time. The solver will always return the exact same Recipe for the given timestamp and platform you specify. In order to get a different results you either need to change the constraints or new ingredient revisions need to be added and you must provide a newer timestamp to have them included in the calculation.\nA few examples will help build up your intuition.\nAdding a Versioned Ingredient We need to add a Versioned Ingredient to the BuildGraph.\nmutation Ingredient ( name : \u0026#34;activestate/A\u0026#34; src : \u0026#34;data:,Bonjour%2C%20World!\u0026#34; builder : \u0026#34;activestate/builders/concat.sh@123\u0026#34; version: 1 args: [ \u0026#34;hello.txt\u0026#34; ] ){ id revision timestamp } Multiple Versions of an Ingredient can exist in BuildGraph at the same time. This differs\nVersion Specifiers Side note. It is important to understand the BuildGraph is designed to build Ingredients from many different Software Eco Systems. These Eco Systems all have their own Versioning schemes. Some Eco Systems have very explicit rules for the software release process and how versions are specified as strings. There are standards like SemVer which specify versions as always having the form \u0026lt;major\u0026gt;.\u0026lt;minor\u0026gt;.\u0026lt;patch\u0026gt; i.e. 1.2.3 while others schemas can be as ridiculous as apples, bannans, oranges. Because, unfortunately, not all Eco Systems are explicit about their Version Schemas and leave it to the Authors to do whatever they want. And unfortunately they do.\nOur goal with the graph is to let you find and work with Ingredients using the natural version numbers you\u0026rsquo;re familiar with. And so we\u0026rsquo;ve created a system to unify these Versions Standards.\nHow we do this \u0026hellip; is to understand that Versioning at its essence is simply a way of providing an ordering independent of time. We have created an internal representation of this ordering and it\u0026rsquo;s up to Ingredient Contributors to provide paresers that can convert a Version for some Versioning Schema to an Ordering that we understand. The platform today provides several Version Type specifiers and every Ingredient must be assosciated with one.\nThe platform provides several Version Schemas today:\n SemVer Perl AlphaSort  And there\u0026rsquo;s a guide for extending these as needed.\n"
}]
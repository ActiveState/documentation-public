<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Command Reference on ActiveState Platform Documentation</title>
    <link>https://activestate.github.io/documentation-public/state/commands/</link>
    <description>Recent content in Command Reference on ActiveState Platform Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://activestate.github.io/documentation-public/state/commands/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Command: activate</title>
      <link>https://activestate.github.io/documentation-public/state/commands/activate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/activate/</guid>
      <description>The activate command allows you to activate an ActiveState project on your local computer. Activating is the process of downloading the build associated with the project, which includes the language interpreter and the set of packages selected for the project, and creating a virtual environment for the interpreter to run in.
For example, when you run state activate ActiveState/ActivePython-3.6, ActivePython 3.6 and all selected packages are installed and configured, and a virtual environment is created.</description>
    </item>
    
    <item>
      <title>Command: auth</title>
      <link>https://activestate.github.io/documentation-public/state/commands/auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/auth/</guid>
      <description>The auth command allows you to authenticate your account on the ActiveState Platform.
Usage To authorize your account:
state auth [--username &amp;lt;value&amp;gt;] [--password &amp;lt;value&amp;gt;] [--token &amp;lt;value&amp;gt;] To sign out from the Platform:
state auth logout To start the sign up process on the command line:
state auth signup state auth If no username, password or token is provided you will be prompted for your ActiveState Platform username and password.
 --username &amp;lt;value&amp;gt;: Manually provide a username.</description>
    </item>
    
    <item>
      <title>Command: clean</title>
      <link>https://activestate.github.io/documentation-public/state/commands/clean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/clean/</guid>
      <description>The clean command enables you to completely remove the State Tool, any installed languages, and any configuration files.
Usage state clean You can use the optional --force or &#39;-f flag to execute the command without any confirmation prompts.
If you want to access the latest version, you do not have to uninstall the current version. You just need to run the state update command.
Related Information update Command</description>
    </item>
    
    <item>
      <title>Command: events</title>
      <link>https://activestate.github.io/documentation-public/state/commands/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/events/</guid>
      <description>The events command lists the configured events for your project. Events are scripts or commands that run when particular State Tool application events occur. For example, you can run a command to start your local web server each time you state activate your project.
Usage state events Related Information Events</description>
    </item>
    
    <item>
      <title>Command: export</title>
      <link>https://activestate.github.io/documentation-public/state/commands/export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/export/</guid>
      <description>The export command allows you to export the contents of the JSON Web Token (JWT) you are using to authenticate with the Platform, or the build recipe (the set of packages and operating system settings) used by your project.
Usage To print your JWT credentials:
state export jwt To print a JSON formatted recipe:
state export recipe To print the recipe for a particular commit:
state export recipe &amp;lt;commitID&amp;gt; You must run the state export command from the directory for the Platform project you want to export the build recipe for.</description>
    </item>
    
    <item>
      <title>Command: fork</title>
      <link>https://activestate.github.io/documentation-public/state/commands/fork/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/fork/</guid>
      <description>The fork command allows you to create a fork of an existing Platform project. A fork is a copy of a project that you can edit.
Syntax state fork --name &amp;lt;project_name&amp;gt; --org &amp;lt;owner&amp;gt; ActiveState-Recipes/Core [--private] The &amp;ldquo;owner&amp;rdquo; argument is your username or the organization name for your copy of the forked project. If you do not specify the --org flag, you will be prompted to select the owner, from the orgs you belong to, interactively at the command prompt.</description>
    </item>
    
    <item>
      <title>Command: history</title>
      <link>https://activestate.github.io/documentation-public/state/commands/history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/history/</guid>
      <description>The history command allows you to view the commit history for your project. It is limited to the past 10 commits.
This is the same as the information displayed in the Project History list in the History tab for your project on the ActiveState Platform.
Usage To view history for the current project:
state history To view history for a specified project by &amp;lt;owner&amp;gt;/&amp;lt;projectname&amp;gt;:
state history --namespace ActiveState/ActivePython-3.6.6 Example The following information is displayed in the output for each commit.</description>
    </item>
    
    <item>
      <title>Command: init</title>
      <link>https://activestate.github.io/documentation-public/state/commands/init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/init/</guid>
      <description>The init command enables you to create a new empty project on your local machine. Once the project is created locally, use the push command to push your local changes to the ActiveState Platform so that you project is available in the Dashboard and to enable all project features, such as secrets.
Usage state init &amp;lt;owner&amp;gt;/&amp;lt;project_name&amp;gt; &amp;lt;Language[@version]&amp;gt; [--path &amp;lt;path&amp;gt;] The &amp;ldquo;owner&amp;rdquo; argument is your username or the organization name that the project belongs to.</description>
    </item>
    
    <item>
      <title>Command: languages</title>
      <link>https://activestate.github.io/documentation-public/state/commands/languages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/languages/</guid>
      <description>The languages command lists the languages in your project, and allows you to update the specified languages.
In order to build your project successfully, only one language can be specified.
 Usage To list the languages in your project:
state languages To update a language:
state languages update &amp;lt;Language[@version]&amp;gt; Use the Language argument to specify the language distribution the project should use. You must specify one of the following:
 perl python  You can also optionally specify the version to use by appending @version to the language with the specific version number you want to use.</description>
    </item>
    
    <item>
      <title>Command: organizations</title>
      <link>https://activestate.github.io/documentation-public/state/commands/organizations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/organizations/</guid>
      <description>The organizations command lists the organizations you are a member of. The Organization name for each Organization you belong to is listed.
Usage state organizations </description>
    </item>
    
    <item>
      <title>Command: packages</title>
      <link>https://activestate.github.io/documentation-public/state/commands/packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/packages/</guid>
      <description>The packages command allows you to manage the packages within an ActiveState Platform project.
Usage state packages state packages add &amp;lt;name[@version]&amp;gt; state packages import --file &amp;lt;filename&amp;gt; state packages update &amp;lt;name[@version]&amp;gt; state packages remove &amp;lt;name&amp;gt; state packages search &amp;lt;name&amp;gt; state packages List the packages and versions currently included in your project.
------------- ------------ Name Version ------------- ------------ numpy pluggy 0.12.0 pytest 4.3.0 requests 2.21.0 ------------- ------------ In the example output, specific versions have been specified for pluggy, pytest, and requests.</description>
    </item>
    
    <item>
      <title>Command: platforms</title>
      <link>https://activestate.github.io/documentation-public/state/commands/platforms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/platforms/</guid>
      <description>The platforms command lists the platforms in your project, and allows you to add and remove platforms, and search for available platforms on the ActiveState Platform.
Usage To list the platforms in your project:
state platforms Search all of the platforms available on the ActiveState Platform:
state platforms search The output lists the Name (Windows, Linux, etc.), Version, and Bit Width for each Platform. Bit Width indicates whether the platform supports the 32-bit or 64-bit version of an operating system.</description>
    </item>
    
    <item>
      <title>Command: projects</title>
      <link>https://activestate.github.io/documentation-public/state/commands/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/projects/</guid>
      <description>The projects command lists the projects you have access to from all of the Organizations you belong to. The information listed for each project includes Project name, Organization name, and a project description (if available).
Usage state projects </description>
    </item>
    
    <item>
      <title>Command: pull</title>
      <link>https://activestate.github.io/documentation-public/state/commands/pull/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/pull/</guid>
      <description>The pull command will update your activestate.yaml so that it references the latest version of your platform runtime environment. When you update the packages in your project on the Platform and successfully created a new build, you need to run the pull command to make the updated build available in your local environment.
When you state activate your project, and there is a newer commit available, you will be notified that you need to run the pull command to get the up-to-date version of your Platform project.</description>
    </item>
    
    <item>
      <title>Command: push</title>
      <link>https://activestate.github.io/documentation-public/state/commands/push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/push/</guid>
      <description>The push command enables you to push your local changes to the ActiveState Platform. For example, you can use the init command to create a new project locally using the State Tool, and then push this change to the Platform so it shows up in your account, and is accessible in the Dashboard.
Usage state push </description>
    </item>
    
    <item>
      <title>Command: run</title>
      <link>https://activestate.github.io/documentation-public/state/commands/run/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/run/</guid>
      <description>The run command allows you to manually run scripts you have defined for your projects by name. Script names are case-sensitive.
Usage state run &amp;lt;script_name&amp;gt; You can also pass arguments to your scripts, the same way you would to any command. Let&amp;rsquo;s say you have a script called &amp;ldquo;hello&amp;rdquo; which takes an argument for who/what it is greeting, you could call it like this:
state run hello world Finally, if you are in an activated state (i.</description>
    </item>
    
    <item>
      <title>Command: scripts</title>
      <link>https://activestate.github.io/documentation-public/state/commands/scripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/scripts/</guid>
      <description>The state scripts command allows you to quickly list all available scripts. Running it produces a list of script names and descriptions.
You can use this output to run the state run command.
Usage state scripts Related Information  Scripts run Command  </description>
    </item>
    
    <item>
      <title>Command: secrets</title>
      <link>https://activestate.github.io/documentation-public/state/commands/secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/secrets/</guid>
      <description>The secrets command allows a user to manage their secrets within a Project. For more information on secrets, what they represent and how they fit into the wider picture of the State Tool and the Platform check out Getting Started.
Usage state secrets state secrets set &amp;lt;secret-namespace&amp;gt; &amp;lt;secret-value&amp;gt; state secrets get &amp;lt;secret-namespace&amp;gt; state secrets sync state secrets Lists available secrets for the current project.
state secrets set Sets the value for the given secret.</description>
    </item>
    
    <item>
      <title>Command: show</title>
      <link>https://activestate.github.io/documentation-public/state/commands/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/show/</guid>
      <description>The show command displays information about the current project, or a specified remote project. The following information is displayed:
 the name of the project the organization the project belongs to all scripts associated with the project all events associated with the project  Usage state show state show &amp;lt;owner/projectName&amp;gt; The &amp;ldquo;owner&amp;rdquo; argument is your username or the organization name that the project belongs to.</description>
    </item>
    
    <item>
      <title>Command: update</title>
      <link>https://activestate.github.io/documentation-public/state/commands/update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://activestate.github.io/documentation-public/state/commands/update/</guid>
      <description>Updates the State Tool to the latest available version.
The update command allows you to download the latest release of the State Tool on demand. By default, the state tool checks for an updated version on a regular basis.
You can disable automatic updates by running state update with the --lock flag. If you disable automatic updates you can force an update by manually running state update.
Usage state update state update --lock state update Checks for a new version and updates the state tool.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development User Guide on ActiveState Platform Documentation</title>
    <link>//activestate.github.io/documentation-public/contributions/devug/</link>
    <description>Recent content in Development User Guide on ActiveState Platform Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="//activestate.github.io/documentation-public/contributions/devug/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>//activestate.github.io/documentation-public/contributions/devug/add-ingredient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//activestate.github.io/documentation-public/contributions/devug/add-ingredient/</guid>
      <description>Chapter 1: Adding your first ingredient In order to add a new ingredient, it&amp;rsquo;s easiest to use the state tool to create a template ingredient file which you can add detail to. We&amp;rsquo;ll create an ingredient for a python module called mypymodule which we&amp;rsquo;ll suppose is ready for release. Run
state ingredient new mypymodule --version 0.0.1 --namespace language/python This will create a mypymodule directory under your current working directory with a single template file mypymodule.</description>
    </item>
    
    <item>
      <title></title>
      <link>//activestate.github.io/documentation-public/contributions/devug/adding-dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//activestate.github.io/documentation-public/contributions/devug/adding-dependencies/</guid>
      <description>Chapter 2: Adding dependencies When writing our mypymodule python module, we decided to use some other open source modules to help out, specifically we decided to use the popular numpy and scipy modules. We need to tell the platform that these modules are required by anyone who wants to use mypymodule. If we have been preparing our module for installation with pip and have a requirements.txt, a pipfile or a pyproject.</description>
    </item>
    
    <item>
      <title></title>
      <link>//activestate.github.io/documentation-public/contributions/devug/extended-toolchain-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//activestate.github.io/documentation-public/contributions/devug/extended-toolchain-example/</guid>
      <description>Extended toolchain descriptor for an ingredient Composable toolchains Note: This document describes how an ingredient would describe the toolchain(s) required to build it, not how we would define a toolchain within the platform
This is a sample blank ingredient with an example of a possible extended toochain descriptor. Note it has an executor toolchain which should be present on the build image and whose definition should contain the mechanism for running this kind of build.</description>
    </item>
    
    <item>
      <title>First principals</title>
      <link>//activestate.github.io/documentation-public/contributions/devug/01-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//activestate.github.io/documentation-public/contributions/devug/01-basics/</guid>
      <description>Ingredient A whose source is the content &amp;ldquo;Hello World!&amp;rdquo; It uses the concat builder and sends the hello.txt argument
Request
mutation Ingredient ( name : &amp;#34;activestate/A&amp;#34; src : &amp;#34;data:,Hello%2C%20World!&amp;#34; builder : &amp;#34;activestate/builders/concat.sh@123&amp;#34; args: [ &amp;#34;hello.txt&amp;#34; ] ){ id revision timestamp } Response
{ &amp;#34;data&amp;#34; : { &amp;#34;id&amp;#34;: &amp;#34;AAA-83838-03030-83838&amp;#34;, &amp;#34;revision&amp;#34;: 0, &amp;#34;timestamp&amp;#34;: 1234 } } A builder is just a shell script in a git repo Note the concat builder takes a url and saves it&amp;rsquo;s results to the name that was set as the first argument.</description>
    </item>
    
    <item>
      <title>Packaging</title>
      <link>//activestate.github.io/documentation-public/contributions/devug/04-packaging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//activestate.github.io/documentation-public/contributions/devug/04-packaging/</guid>
      <description>We provide several Packagers that will take Artifacts out of the Build Graph and convert them to a format that you can use natively. Packagers have an number of common required arguments and fields in common. These describe the Artifacts that the packager needs.
Common query { ; packager using atTime/requirements packager(atTime=1234, platform=&amp;#34;II-X&amp;#34;) { fields... } ; packager referencing an order packager(commitId = &amp;#34;AA7-IXX...&amp;#34;) { fields... } } Common arguments In addition to packager specific arguments all packagers require one of more of the following attributes.</description>
    </item>
    
    <item>
      <title>Requirements</title>
      <link>//activestate.github.io/documentation-public/contributions/devug/02-requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//activestate.github.io/documentation-public/contributions/devug/02-requirements/</guid>
      <description>interface Requirement{ name: String! } type Any implements Requirement {name: String!} type Latest implements Requirement {name: String!} type GT implements Requirement{ name: String! version: String! } type GTE implements Requirement{ name: String! version: String! } type LT implements Requirement{ name: String! version: String! } type LTE implements Requirement{ name: String! version: String! } </description>
    </item>
    
    <item>
      <title>Versions</title>
      <link>//activestate.github.io/documentation-public/contributions/devug/03-versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//activestate.github.io/documentation-public/contributions/devug/03-versions/</guid>
      <description>In previous examples we showed you how to add simple ingredients to the BuildGraph without any kind of lineage. Every edit we posted was a Revision to the single Ingredient. The revision you are given when asking for Artifacts depends entirely on the time stamp given. Software authors however often ship source for multiple versions of the same software. The BuildGraph models this as well and gives you powerful tools to choose the most appropriate version for your requirments.</description>
    </item>
    
  </channel>
</rss>